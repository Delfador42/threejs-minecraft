{"version":3,"sources":["webpack:///./src/utils/setting/GlobalSetting.js","webpack:///./src/utils/objects/cube/CubeFactory.js","webpack:///./src/utils/stats/StatsWindow.js","webpack:///./src/utils/basic/Light.js","webpack:///./src/utils/controls/ShowOrbitControl.js","webpack:///./src/utils/objects/cube/DefaultCube.js","webpack:///./src/utils/controls/MCFirstPersonControl.js","webpack:///./src/index.js","webpack:///./src/utils/basic/Scene.js","webpack:///./src/utils/basic/Camera.js","webpack:///./src/utils/basic/Renderer.js","webpack:///./src/utils/controls/ControlBuilder.js","webpack:///./src/utils/sound/Bgm.js"],"names":["enableShadow","defaultCube","_instanceObj","key","this","cubeOptions","_materials","_materialsMap","_materialsHalfMap","_geometry","undefined","_geometryMap","_cubeSize","initMaterials","initGeometry","cubeAttributes","geometryType","isHalfCube","isStairsCube","geom","width","vertices","faces","imagePoint","faceVertexUvs","computeFaceNormals","length","textureLoader","textureList","imageUrlIndex","images","imageUrl","push","texture","load","generateMipmaps","minFilter","magFilter","materialList","textureIndex","map","fog","materialParameters","materialParametersForOneList","keyIndex","imageSet","materialTmp","indexOf","materialNew","clone","textureNew","wrapS","wrapT","repeat","set","x","y","z","rotateX","rotateY","rotateZ","position","rotation","mesh","receiveShadow","castShadow","GlobalSetting","userData","fullCubePosition","cubeTypeKey","meshParameters","rotateEnable","Math","PI","name","canvasElId","_instance","stats","domElement","style","left","top","document","getElementById","appendChild","getAmbientLightIntensity","lightCurrentIntensity","lightHighIntensity","lightLowIntensity","min","max","getDirectionalLightIntensity","camera","controls","OrbitControls","dampingFactor","enablePan","objects","window","addEventListener","event","clickedObjects","raycaster","mouse","clientX","innerWidth","clientY","innerHeight","setFromCamera","intersectObjects","getClickedObject","obj","object","console","log","grass","color","isPenetrable","isIndestructible","test","dirt","cobblestone","cobblestone_mossy","stone","stone_slab","brick","planks_birch","planks_acacia","planks_jungle","planks_oak","planks_spruce","log_acacia","leaves_acacia","transparent","leaves_acacia_opaque","log_birch","leaves_birch","leaves_birch_opaque","log_jungle","leaves_jungle","leaves_jungle_opaque","log_oak","leaves_oak","leaves_oak_opaque","log_spruce","leaves_spruce","leaves_spruce_opaque","glass","melon","pumpkin_face_off","pumpkin_face_on","test_half","opacity","stone_slab_half","brick_half","planks_birch_half","planks_acacia_half","planks_jungle_half","planks_oak_half","planks_spruce_half","cobblestone_stairs","cobblestone_mossy_stairs","stone_stairs","stone_slab_stairs","brick_stairs","planks_birch_stairs","planks_acacia_stairs","planks_jungle_stairs","planks_oak_stairs","planks_spruce_stairs","scene","currentCubeTypeIndex","checkRay","X0","X1","Z0","Z1","Y0","Y1","moveForward","moveBackward","moveLeft","moveRight","preRuning","isRunning","canJump","velocity","direction","worldOption","g","personOption","height","sightHeight","jumpHeight","speedWalk","speedRun","accelerateRateStart","accelerateRateStop","thickness","init","PointerLockControls","blocker","createElement","zIndex","id","body","append","lock","display","aimX","setAimStyle","aimY","keyCode","performance","now","sqrt","i","initMouseFunction","initPreviewCube","delta","isLocked","Number","normalize","velocityXZMax","velocityZTmp","abs","velocityXTmp","positionBeforeX","getObject","positionBeforeZ","checkPositionOptions","rayMove","Z0NearFlatTmp","Z0Flat","ray","origin","copy","floor","intersections","point","Z1NearFlatTmp","Z1Flat","nextZ","X0NearFlatTmp","X0Flat","X1NearFlatTmp","X1Flat","nextX","bottomFlatY","bottomFlatYTmp","topFlatY","topFlatYTmp","nextY","updatePreviewCube","aim","distance","face","normal","button","index","findIndex","e","splice","remove","getObjectById","rotate","targetIsHalfCube","DefaultCube","newIsHalfCube","Object","keys","newIsStairsCube","newPositionVector","applyAxisAngle","round","yMove","newPosition","positionArray","positionTmp","checkPositionIsExistBlock","newDirectionRotate","newDirection","worldDirection","getWorldDirection","cube","buildCube","add","wheelDelta","changeCurrentCubeTypeIndex","detail","onmousewheel","isNext","plusValue","result","previewCube","geometryMap","previewCubeType","geometry","previewGeometry","getCurrentCubeTypeIndex","scale","material","previewCubeRotation","aimEl","transform","fontSize","fontWeight","textAlign","verticalAlign","lineHeight","fontFamily","backgroundColor","type","divEl","spanEl1","innerText","spanEl2","spanEl3","spanEl4","isWebGLAvailable","getWebGLErrorMessage","lightDirectional","canvasEL","backgroundType","textureCube","background","cubeShader","uniforms","value","fragmentShader","vertexShader","depthWrite","side","cubeWithPic","initScene","lightAmbient","light","setHex","intensity","initAmbientLight","shadow","radius","initDirectionalLight","fov","near","far","initCamera","aspect","offsetWidth","offsetHeight","updateProjectionMatrix","renderer","shadowMap","enabled","setClearColor","initRenderer","setSize","setPixelRatio","devicePixelRatio","controlsType","showOrbitControl","initClickFunction","children","initControls","lightOption","current","low","high","becomeHigher","cubeFactory","testBlock","mountainHeight","zValue","xValue","yValue","cubeType","values","idHalfCube","cubeInfo","prevTime","animate","requestAnimationFrame","time","update","render","changeLight","onresize","onload","audioBGM","currentIndex","arr","Audio","preload","autoplay","hidden","right","loop","src","play","playHandler","removeEventListener","initBGMPlayer"],"mappings":"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","file":"package/index.e07acf5cdd99f17f123d.bundle.js","sourcesContent":["export default {\r\n    enableShadow:false\r\n}","import * as THREE from 'three';\r\nimport GlobalSetting from \"../../setting/GlobalSetting\";\r\n\r\nexport default class CubeFactory {\r\n    constructor(defaultCube) {\r\n        if (CubeFactory._instanceObj && CubeFactory._instanceObj[defaultCube.key]) {\r\n            return CubeFactory._instanceObj[defaultCube.key];\r\n        }\r\n        this.cubeOptions = defaultCube;\r\n        this._materials = [];\r\n        this._materialsMap = {};\r\n        this._materialsHalfMap = {};\r\n        this._geometry = undefined;\r\n        this._geometryMap = {};\r\n        this._cubeSize = 1;//方块边长，只能为1\r\n        this.initMaterials();\r\n        this.initGeometry();\r\n        CubeFactory._instanceObj = {\r\n            [defaultCube.key]: this\r\n        }\r\n    }\r\n\r\n    //初始化形状\r\n    initGeometry() {\r\n        if (this._geometryMap) {\r\n            this._geometry = this._geometryMap[this.cubeOptions.cubeAttributes.geometryType];\r\n        }\r\n        if (this._geometry) {\r\n            return;\r\n        }\r\n\r\n        let isHalfCube = (this.cubeOptions.cubeAttributes !== undefined) && this.cubeOptions.cubeAttributes.geometryType === 'halfCube';\r\n        let isStairsCube = (this.cubeOptions.cubeAttributes !== undefined) && this.cubeOptions.cubeAttributes.geometryType === 'stairsCube';\r\n        if (isHalfCube) {\r\n            this._geometry = new THREE.CubeGeometry(this._cubeSize, this._cubeSize / 2, this._cubeSize);\r\n        } else if (isStairsCube) {\r\n            let geom = new THREE.Geometry();\r\n            let width = this._cubeSize;\r\n            geom.vertices = [//顶点\r\n                new THREE.Vector3(width / 2, -width / 2, width / 2),\r\n                new THREE.Vector3(width / 2, -width / 2, -width / 2),\r\n                new THREE.Vector3(-width / 2, -width / 2, -width / 2),\r\n                new THREE.Vector3(-width / 2, -width / 2, width / 2),\r\n\r\n                new THREE.Vector3(width / 2, 0, width / 2),\r\n                new THREE.Vector3(width / 2, 0, -width / 2),\r\n                new THREE.Vector3(0, 0, -width / 2),\r\n                new THREE.Vector3(0, 0, width / 2),\r\n\r\n                new THREE.Vector3(0, width / 2, width / 2),\r\n                new THREE.Vector3(0, width / 2, -width / 2),\r\n                new THREE.Vector3(-width / 2, width / 2, -width / 2),\r\n                new THREE.Vector3(-width / 2, width / 2, width / 2),\r\n            ];\r\n            geom.faces = [\r\n                //底面\r\n                new THREE.Face3(0, 2, 1),\r\n                new THREE.Face3(0, 3, 2),\r\n                //前面下半\r\n                new THREE.Face3(0, 1, 5),\r\n                new THREE.Face3(0, 5, 4),\r\n                //前面上半\r\n                new THREE.Face3(7, 6, 9),\r\n                new THREE.Face3(7, 9, 8),\r\n                //上面前半\r\n                new THREE.Face3(4, 5, 6),\r\n                new THREE.Face3(4, 6, 7),\r\n                //上面后半\r\n                new THREE.Face3(8, 9, 10),\r\n                new THREE.Face3(8, 10, 11),\r\n                //后面\r\n                new THREE.Face3(2, 3, 11),\r\n                new THREE.Face3(2, 11, 10),\r\n                //左\r\n                new THREE.Face3(7, 8, 11),\r\n                new THREE.Face3(7, 11, 3),\r\n                new THREE.Face3(7, 3, 0),\r\n                new THREE.Face3(7, 0, 4),\r\n                //右\r\n                new THREE.Face3(6, 10, 9),\r\n                new THREE.Face3(6, 2, 10),\r\n                new THREE.Face3(6, 1, 2),\r\n                new THREE.Face3(6, 5, 1),\r\n            ];\r\n            const imagePoint = [//切图位置\r\n                [\r\n                    new THREE.Vector2(0, 0),\r\n                    new THREE.Vector2(0.5, 0),\r\n                    new THREE.Vector2(1, 0),\r\n                ],\r\n                [\r\n                    new THREE.Vector2(0, 0.5),\r\n                    new THREE.Vector2(0.5, 0.5),\r\n                    new THREE.Vector2(1, 0.5),\r\n                ],\r\n                [\r\n                    new THREE.Vector2(0, 1),\r\n                    new THREE.Vector2(0.5, 1),\r\n                    new THREE.Vector2(1, 1),\r\n                ]\r\n            ]\r\n            {\r\n                //底面\r\n                geom.faceVertexUvs[0][0] = ([imagePoint[0][0], imagePoint[2][2], imagePoint[0][2]]);\r\n                geom.faceVertexUvs[0][1] = ([imagePoint[0][0], imagePoint[2][0], imagePoint[2][2]]);\r\n                //前面下半\r\n                geom.faceVertexUvs[0][2] = ([imagePoint[0][0], imagePoint[0][2], imagePoint[1][2]]);\r\n                geom.faceVertexUvs[0][3] = ([imagePoint[0][0], imagePoint[1][2], imagePoint[1][0]]);\r\n                //前面上半\r\n                geom.faceVertexUvs[0][4] = geom.faceVertexUvs[0][2];\r\n                geom.faceVertexUvs[0][5] = geom.faceVertexUvs[0][3];\r\n                //上面前半\r\n                geom.faceVertexUvs[0][6] = geom.faceVertexUvs[0][2];\r\n                geom.faceVertexUvs[0][7] = geom.faceVertexUvs[0][3];\r\n                //上面后半\r\n                geom.faceVertexUvs[0][8] = geom.faceVertexUvs[0][2];\r\n                geom.faceVertexUvs[0][9] = geom.faceVertexUvs[0][3];\r\n                //后面\r\n                geom.faceVertexUvs[0][10] = ([imagePoint[0][0], imagePoint[0][2], imagePoint[2][2]]);\r\n                geom.faceVertexUvs[0][11] = ([imagePoint[0][0], imagePoint[2][2], imagePoint[2][0]]);\r\n                //左\r\n                geom.faceVertexUvs[0][12] = ([imagePoint[1][1], imagePoint[2][1], imagePoint[2][0]]);\r\n                geom.faceVertexUvs[0][13] = ([imagePoint[1][1], imagePoint[2][0], imagePoint[0][0]]);\r\n                geom.faceVertexUvs[0][14] = ([imagePoint[1][1], imagePoint[0][0], imagePoint[0][2]]);\r\n                geom.faceVertexUvs[0][15] = ([imagePoint[1][1], imagePoint[0][2], imagePoint[1][2]]);\r\n                //右\r\n                geom.faceVertexUvs[0][16] = ([imagePoint[1][1], imagePoint[2][0], imagePoint[2][1]]);\r\n                geom.faceVertexUvs[0][17] = ([imagePoint[1][1], imagePoint[0][0], imagePoint[2][0]]);\r\n                geom.faceVertexUvs[0][18] = ([imagePoint[1][1], imagePoint[0][2], imagePoint[0][0]]);\r\n                geom.faceVertexUvs[0][19] = ([imagePoint[1][1], imagePoint[1][2], imagePoint[0][2]]);\r\n            }\r\n            geom.computeFaceNormals();//计算面的法向量。可以在点击时判断出face的法向量。不使用此方法，则点击时获得的face法向量xyz均为0,。\r\n            this._geometry = geom;\r\n        } else {\r\n            this._geometry = new THREE.CubeGeometry(this._cubeSize, this._cubeSize, this._cubeSize);\r\n        }\r\n\r\n        this._geometryMap[this.cubeOptions.cubeAttributes.geometryType] = this._geometry\r\n    }\r\n\r\n    //初始化材质\r\n    initMaterials() {\r\n        if (this._materialsMap) {\r\n            this._materials = this._materialsMap[this.cubeOptions.key];\r\n        }\r\n        if (this._materials && this._materials.length !== 0) {\r\n            return;\r\n        }\r\n        this._materials = [];\r\n        let textureLoader = new THREE.TextureLoader();\r\n        let textureList = [];\r\n        for (let imageUrlIndex in this.cubeOptions.images) {\r\n            let imageUrl = this.cubeOptions.images[imageUrlIndex]\r\n            if (imageUrl === '' || imageUrl === undefined) {\r\n                textureList.push(undefined);\r\n            } else {\r\n                let texture = textureLoader.load(imageUrl);\r\n                texture.generateMipmaps = true;//生成纹理，用于相关滤镜，根据远近自动调整贴图质量\r\n                texture.minFilter = THREE.NearestMipMapNearestFilter;//minFilter属性：指定纹理如何缩小。默认值：THREE.LinearMipMapLinearFilter。\r\n                texture.magFilter = THREE.NearestFilter;//magFilter属性：指定纹理如何放大。THREE.NearestFilter 贴图像素化\r\n                textureList.push(texture);\r\n            }\r\n        }\r\n        let materialList = [];\r\n        for (let textureIndex in textureList) {\r\n            let texture = textureList[textureIndex];\r\n\r\n            materialList.push(\r\n                new THREE.MeshLambertMaterial({\r\n                    // color:0x4F9C1A,\r\n                    // side: THREE.DoubleSide,\r\n                    map: texture,\r\n                    // vertexColors: THREE.VertexColors,\r\n                    fog: true,//当前材质是否受到全局雾化效果器影响\r\n                    ...(this.cubeOptions.materialParameters ? this.cubeOptions.materialParameters : {}),\r\n                    ...(this.cubeOptions.materialParametersForOneList && this.cubeOptions.materialParametersForOneList[textureIndex] ? this.cubeOptions.materialParametersForOneList[textureIndex] : {}),\r\n                })\r\n            );\r\n        }\r\n        //半高贴图\r\n        let isHalfCube = (this.cubeOptions.cubeAttributes !== undefined) && this.cubeOptions.cubeAttributes.geometryType === 'halfCube';\r\n\r\n        for (let keyIndex in this.cubeOptions.imageSet) {\r\n            let key = this.cubeOptions.imageSet[keyIndex];\r\n            let materialTmp = materialList[key];\r\n            if (isHalfCube) {\r\n                if (\"0145\".indexOf(keyIndex) >= 0) {\r\n                    if (!this._materialsHalfMap) {\r\n                        this._materialsHalfMap = {}\r\n                    }\r\n                    if (this._materialsHalfMap[this.cubeOptions.key]) {\r\n                        materialTmp = this._materialsHalfMap[this.cubeOptions.key];\r\n                    } else if (materialTmp.map) {\r\n                        let materialNew = materialTmp.clone();\r\n                        materialNew.map = materialTmp.map.clone();\r\n                        let textureNew = textureLoader.load(this.cubeOptions.images[this.cubeOptions.imageSet[keyIndex]]);\r\n                        textureNew.generateMipmaps = true;\r\n                        textureNew.minFilter = THREE.NearestMipMapNearestFilter;\r\n                        textureNew.magFilter = THREE.NearestFilter;\r\n                        textureNew.wrapS = textureNew.wrapT = THREE.RepeatWrapping;\r\n                        textureNew.repeat.set(1, 0.5);\r\n                        materialNew.map = textureNew;\r\n                        materialTmp = materialNew;\r\n                        this._materialsHalfMap[this.cubeOptions.key] = materialTmp;\r\n                    }\r\n                }\r\n            }\r\n            this._materials.push(materialTmp);\r\n        }\r\n        this._materialsMap[this.cubeOptions.key] = this._materials;\r\n    };\r\n\r\n\r\n    //构造方块\r\n    buildCube(x, y, z, defaultCube, rotateX, rotateY, rotateZ) {\r\n        let position = {x: x, y: y, z: z};\r\n        let rotation = {rotateX: rotateX, rotateY: rotateY, rotateZ: rotateZ};\r\n        if (defaultCube) {\r\n            this.cubeOptions = defaultCube;\r\n            this.initGeometry();\r\n            this.initMaterials();\r\n        }\r\n        position.x = position.x || 0;\r\n        position.y = position.y || 0;\r\n        position.z = position.z || 0;\r\n        let isStairsCube = (this.cubeOptions.cubeAttributes !== undefined) && this.cubeOptions.cubeAttributes.geometryType === 'stairsCube';\r\n        let mesh = new THREE.Mesh(\r\n            this._geometry,\r\n            isStairsCube ? this._materials[0] : this._materials\r\n            // new THREE.MeshLambertMaterial({color: 0x00cc00})\r\n        );\r\n        mesh.receiveShadow = mesh.castShadow = GlobalSetting.enableShadow;\r\n        //新方块中心位置\r\n        {\r\n            mesh.position.x = position.x;\r\n            mesh.position.y = position.y;\r\n            mesh.position.z = position.z;\r\n            mesh.userData = {\r\n                fullCubePosition: {\r\n                    x: mesh.position.x,\r\n                    y: mesh.position.y,\r\n                    z: mesh.position.z,\r\n                },\r\n                cubeTypeKey: this.cubeOptions.key,\r\n            };\r\n        }\r\n            if (rotation.rotateX && (defaultCube.meshParameters && defaultCube.meshParameters.rotateEnable && defaultCube.meshParameters.rotateEnable.x)) {\r\n                mesh.rotateX(rotation.rotateX * Math.PI / 180);\r\n            }\r\n            if (rotation.rotateY && (defaultCube.meshParameters && defaultCube.meshParameters.rotateEnable && defaultCube.meshParameters.rotateEnable.y)) {\r\n                mesh.rotateY(rotation.rotateY * Math.PI / 180);\r\n            }\r\n            if (rotation.rotateZ && (defaultCube.meshParameters && defaultCube.meshParameters.rotateEnable && defaultCube.meshParameters.rotateEnable.z)) {\r\n                mesh.rotateZ(rotation.rotateZ * Math.PI / 180);\r\n            }\r\n        mesh.name = this.cubeOptions.key + \"(\" + position.x + \",\" + position.y + \",\" + position.z + \")\";\r\n        return mesh;\r\n    }\r\n}","// 查看信息小控件\r\nimport Stats from \"stats-js\";\r\nexport default class StatsWindow {\r\n    constructor(canvasElId) {\r\n        if (StatsWindow._instance) {\r\n            return StatsWindow._instance;\r\n        }\r\n        let stats;\r\n        stats = new Stats();\r\n        stats.domElement.style.position = 'absolute';\r\n        stats.domElement.style.left = '0px';\r\n        stats.domElement.style.top = '0px';\r\n        document.getElementById(canvasElId).appendChild(stats.domElement);\r\n        StatsWindow._instance = this;\r\n        this.stats=stats;\r\n        return this;\r\n    }\r\n}\r\n\r\n","import * as THREE from \"three\";\r\nimport GlobalSetting from \"../setting/GlobalSetting\";\r\n\r\nexport const lightHighIntensity = 1;\r\nexport const lightLowIntensity = 0.3;\r\nexport const lightCurrentIntensity = 1;\r\nexport const lightValueBecomeHigher = true;\r\n\r\nexport function initAmbientLight() {\r\n    let light = new THREE.AmbientLight();//环境光\r\n    light.castShadow = false;\r\n    light.color = new THREE.Color().setHex(0xffffff);\r\n    light.intensity = getAmbientLightIntensity();\r\n    return light;\r\n}\r\n\r\nexport function getAmbientLightIntensity(lightCurrentIntensity, lightHighIntensity, lightLowIntensity) {\r\n    return Math.min(Math.max(lightLowIntensity, lightCurrentIntensity), lightHighIntensity);\r\n}\r\n\r\nexport function initDirectionalLight() {\r\n    let light = new THREE.DirectionalLight();//环境光\r\n    light.castShadow = GlobalSetting.enableShadow;\r\n    light.color = new THREE.Color().setHex(0xffffff);\r\n    light.intensity = getDirectionalLightIntensity();\r\n    light.shadow.radius = 512;\r\n    light.position.x = 10;\r\n    light.position.y = -10;\r\n    light.position.z = 10;\r\n    return light;\r\n}\r\n\r\nexport function getDirectionalLightIntensity(lightCurrentIntensity, lightHighIntensity, lightLowIntensity) {\r\n    return Math.min(Math.max(lightLowIntensity, lightCurrentIntensity), lightHighIntensity) / 4;\r\n}\r\n","import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\nimport * as THREE from 'three';\r\nexport default class ShowOrbitControl {\r\n\r\n    constructor(camera, domElement) {\r\n        // ShowOrbitControl._instance;\r\n        // this.controls;\r\n        this.camera = camera;\r\n        if (ShowOrbitControl._instance) {\r\n            return ShowOrbitControl._instance;\r\n        }\r\n        this.controls = new OrbitControls(camera, domElement);\r\n        //动态阻尼系数 就是鼠标拖拽旋转灵敏度\r\n        this.controls.dampingFactor = 1;\r\n        //是否允许平移\r\n        this.controls.enablePan = false;\r\n        ShowOrbitControl._instance = this;\r\n        return ShowOrbitControl._instance;\r\n    }\r\n\r\n    initClickFunction(objects, camera) {\r\n        window.addEventListener('mousedown', (event) => {\r\n            let clickedObjects = getClickedObject(event, objects, this.camera);\r\n            if (clickedObjects.length > 0) {\r\n                let obj = clickedObjects[0].object;\r\n                console.log(\"点击的对象：\" + obj.name);\r\n            }\r\n        }, false);\r\n    }\r\n}\r\n\r\n//获取点击的对象\r\nfunction getClickedObject(event, objects, camera) {\r\n    let raycaster = new THREE.Raycaster();\r\n    let mouse = new THREE.Vector2();\r\n    //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n    // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n    raycaster.setFromCamera(mouse, camera);\r\n    // 获取raycaster直线和所有模型相交的数组集合\r\n    return raycaster.intersectObjects(objects);\r\n}\r\n\r\n\r\n","//预设方块信息\r\nimport * as THREE from 'three'\r\n\r\nexport default {\r\n    grass: {\r\n        key: 'grass',//设置和对象key一样\r\n        images: [//贴图路径\r\n            './assets/img/blocks/grass_side.png',\r\n            './assets/img/blocks/grass_top.png',\r\n            './assets/img/blocks/dirt.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],//六面贴图使用的images图片下标\r\n        materialParameters: {},//THREE.MeshXxxMaterial 对象参数，六面都影响\r\n        materialParametersForOneList: [//THREE.MeshXxxMaterial 对象参数，只影响对应的一个面\r\n            {},\r\n            {color: 0xB1FB6C},\r\n        ],\r\n        meshParameters: {\r\n            rotateEnable: {//放置方块时，旋转辅助参数，是否可在对应轴上旋转\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,//不能碰撞。false-能踩能撞\r\n            isIndestructible: false,//不能销毁。false-左键点击能消除\r\n            geometryType:'cube',//是半砖。cube-砖。halfCube-半砖，可以在一个1x1x1内叠加另一个半砖\r\n        },\r\n    },\r\n    test: {\r\n        key: 'test',\r\n        images: [\r\n            './assets/img/1.png',\r\n            './assets/img/2.png',\r\n            './assets/img/3.png',\r\n            './assets/img/4.png',\r\n            './assets/img/5.png',\r\n            './assets/img/6.png',\r\n        ],\r\n        imageSet: [0, 1, 2, 3, 4, 5],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    dirt: {\r\n        key: 'dirt',\r\n        images: [\r\n            './assets/img/blocks/dirt.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    // Cloud: {\r\n    //     key: 'Cloud',\r\n    //     images: [\r\n    //         './assets/img/blocks/grass_side.png',\r\n    //         './assets/img/blocks/grass_top_green.png',\r\n    //         './assets/img/blocks/dirt.png',\r\n    //     ],\r\n    //     imageSet: [0, 0, 1, 2, 0, 0],\r\n    //     materialParameters: {\r\n    //         transparent: true,//透明\r\n    //         opacity: 0.2,//透明度\r\n    //     }\r\n    // },\r\n    cobblestone: {\r\n        key: 'cobblestone',\r\n        images: [\r\n            './assets/img/blocks/cobblestone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    cobblestone_mossy: {\r\n        key: 'cobblestone_mossy',\r\n        images: [\r\n            './assets/img/blocks/cobblestone_mossy.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    stone: {\r\n        key: 'stone',\r\n        images: [\r\n            './assets/img/blocks/stone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    stone_slab: {\r\n        key: 'stone_slab',\r\n        images: [\r\n            './assets/img/blocks/stone_slab_side.png',\r\n            './assets/img/blocks/stone_slab_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    brick: {\r\n        key: 'brick',\r\n        images: [\r\n            './assets/img/blocks/brick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    planks_birch: {\r\n        key: 'planks_birch',\r\n        images: [\r\n            './assets/img/blocks/planks_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    planks_acacia: {\r\n        key: 'planks_acacia',\r\n        images: [\r\n            './assets/img/blocks/planks_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    planks_jungle: {\r\n        key: 'planks_jungle',\r\n        images: [\r\n            './assets/img/blocks/planks_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    planks_oak: {\r\n        key: 'planks_oak',\r\n        images: [\r\n            './assets/img/blocks/planks_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    planks_spruce: {\r\n        key: 'planks_spruce',\r\n        images: [\r\n            './assets/img/blocks/planks_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    // reeds: {\r\n    //     key: 'reeds',\r\n    //     images: [\r\n    //         './assets/img/blocks/reeds.png',\r\n    //     ],\r\n    //     imageSet: [0, 0, 0, 0, 0, 0],\r\n    //     materialParameters: {\r\n    //         transparent: true,\r\n    //         side: THREE.DoubleSide,\r\n    //     },\r\n    //     materialParametersForOneList:[]\r\n    // },\r\n\r\n    log_acacia: {\r\n        key: 'log_acacia',\r\n        images: [\r\n            './assets/img/blocks/log_acacia.png',\r\n            './assets/img/blocks/log_acacia_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_acacia: {\r\n        key: 'leaves_acacia',\r\n        images: [\r\n            './assets/img/blocks/leaves_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_acacia_opaque: {\r\n        key: 'leaves_acacia_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_acacia_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n\r\n    log_birch: {\r\n        key: 'log_birch',\r\n        images: [\r\n            './assets/img/blocks/log_birch.png',\r\n            './assets/img/blocks/log_birch_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_birch: {\r\n        key: 'leaves_birch',\r\n        images: [\r\n            './assets/img/blocks/leaves_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_birch_opaque: {\r\n        key: 'leaves_birch_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_birch_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n\r\n    log_jungle: {\r\n        key: 'log_jungle',\r\n        images: [\r\n            './assets/img/blocks/log_jungle.png',\r\n            './assets/img/blocks/log_jungle_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_jungle: {\r\n        key: 'leaves_jungle',\r\n        images: [\r\n            './assets/img/blocks/leaves_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_jungle_opaque: {\r\n        key: 'leaves_jungle_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_jungle_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n\r\n    log_oak: {\r\n        key: 'log_oak',\r\n        images: [\r\n            './assets/img/blocks/log_oak.png',\r\n            './assets/img/blocks/log_oak_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_oak: {\r\n        key: 'leaves_oak',\r\n        images: [\r\n            './assets/img/blocks/leaves_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_oak_opaque: {\r\n        key: 'leaves_oak_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_oak_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n\r\n    log_spruce: {\r\n        key: 'log_spruce',\r\n        images: [\r\n            './assets/img/blocks/log_spruce.png',\r\n            './assets/img/blocks/log_spruce_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_spruce: {\r\n        key: 'leaves_spruce',\r\n        images: [\r\n            './assets/img/blocks/leaves_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    leaves_spruce_opaque: {\r\n        key: 'leaves_spruce_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_spruce_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    glass: {\r\n        key: 'glass',\r\n        images: [\r\n            './assets/img/blocks/glass.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    // ice: {\r\n    //     key: 'ice',\r\n    //     images: [\r\n    //         './assets/img/blocks/ice.png',\r\n    //     ],\r\n    //     imageSet: [0, 0, 0, 0, 0, 0],\r\n    //     materialParameters: {\r\n    //         transparent:true\r\n    //     },\r\n    //     materialParametersForOneList: [\r\n    //     ],\r\n    //     meshParameters: {\r\n    //         rotateEnable: {\r\n    //             x: false,\r\n    //             y: false,\r\n    //             z: false,\r\n    //         }\r\n    //     },\r\n    // },\r\n    melon: {\r\n        key: 'melon',\r\n        images: [\r\n            './assets/img/blocks/melon_side.png',\r\n            './assets/img/blocks/melon_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    pumpkin_face_off: {\r\n        key: 'pumpkin_face_off',\r\n        images: [\r\n            './assets/img/blocks/pumpkin_face_off.png',\r\n            './assets/img/blocks/pumpkin_side.png',\r\n            './assets/img/blocks/pumpkin_top.png',\r\n        ],\r\n        imageSet: [0, 1, 2, 2, 1, 1],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    pumpkin_face_on: {\r\n        key: 'pumpkin_face_on',\r\n        images: [\r\n            './assets/img/blocks/pumpkin_face_on.png',\r\n            './assets/img/blocks/pumpkin_side.png',\r\n            './assets/img/blocks/pumpkin_top.png',\r\n        ],\r\n        imageSet: [0, 1, 2, 2, 1, 1],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'cube',\r\n        },\r\n    },\r\n    test_half: {\r\n        key: 'test_half',\r\n        images: [''],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0xFFFFFF,\r\n            transparent: true,//透明\r\n            opacity: 0.8,//透明度\r\n        },\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    stone_slab_half: {\r\n        key: 'stone_slab_half',\r\n        images: [\r\n            './assets/img/blocks/stone_slab_side.png',\r\n            './assets/img/blocks/stone_slab_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    brick_half: {\r\n        key: 'brick_half',\r\n        images: [\r\n            './assets/img/blocks/brick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    planks_birch_half: {\r\n        key: 'planks_birch_half',\r\n        images: [\r\n            './assets/img/blocks/planks_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    planks_acacia_half: {\r\n        key: 'planks_acacia_half',\r\n        images: [\r\n            './assets/img/blocks/planks_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    planks_jungle_half: {\r\n        key: 'planks_jungle_half',\r\n        images: [\r\n            './assets/img/blocks/planks_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    planks_oak_half: {\r\n        key: 'planks_oak_half',\r\n        images: [\r\n            './assets/img/blocks/planks_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    planks_spruce_half: {\r\n        key: 'planks_spruce_half',\r\n        images: [\r\n            './assets/img/blocks/planks_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'halfCube',\r\n        },\r\n    },\r\n    cobblestone_stairs: {\r\n        key: 'cobblestone_stairs',\r\n        images: [\r\n            './assets/img/blocks/cobblestone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    cobblestone_mossy_stairs: {\r\n        key: 'cobblestone_mossy_stairs',\r\n        images: [\r\n            './assets/img/blocks/cobblestone_mossy.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    stone_stairs: {\r\n        key: 'stone_stairs',\r\n        images: [\r\n            './assets/img/blocks/stone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    stone_slab_stairs: {\r\n        key: 'stone_slab_stairs',\r\n        images: [\r\n            './assets/img/blocks/stone_slab_side.png',\r\n            './assets/img/blocks/stone_slab_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    brick_stairs: {\r\n        key: 'brick_stairs',\r\n        images: [\r\n            './assets/img/blocks/brick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    planks_birch_stairs: {\r\n        key: 'planks_birch_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    planks_acacia_stairs: {\r\n        key: 'planks_acacia_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    planks_jungle_stairs: {\r\n        key: 'planks_jungle_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    planks_oak_stairs: {\r\n        key: 'planks_oak_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n    planks_spruce_stairs: {\r\n        key: 'planks_spruce_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes:{\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType:'stairsCube',\r\n        },\r\n    },\r\n}","import {PointerLockControls} from 'three/examples/jsm/controls/PointerLockControls'\r\nimport CubeFactory from \"../objects/cube/CubeFactory\";\r\nimport * as THREE from 'three';\r\nimport DefaultCube from '../objects/cube/DefaultCube'\r\nimport {Vector3} from \"three\";\r\n\r\nexport default class MCFirstPersonControl {\r\n\r\n    constructor(camera, domElement, objects, scene) {\r\n        if (MCFirstPersonControl._instance) {\r\n            return MCFirstPersonControl._instance;\r\n        }\r\n        // MCFirstPersonControl._instance;\r\n        // this.controls;\r\n        // this.removeBlockTimer;//移除方块计时\r\n        // this.previewCube;//预览方块\r\n        this.camera = camera;\r\n        this.objects = objects;\r\n        this.scene = scene;\r\n        this.currentCubeTypeIndex = 0;\r\n\r\n        this.checkRay = {//0为负，1为正\r\n            X0: [],\r\n            X1: [],\r\n            Z0: [],\r\n            Z1: [],\r\n\r\n            Y0: [],\r\n            Y1: [],\r\n        };\r\n        this.moveForward = false;\r\n        this.moveBackward = false;\r\n        this.moveLeft = false;\r\n        this.moveRight = false;\r\n        this.preRuning = undefined;\r\n        this.isRunning = false;\r\n        this.canJump = false;\r\n        // this.prevTime = performance.now();\r\n        this.velocity = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.worldOption = {\r\n            g: 9.0\r\n        };\r\n        this.personOption = {\r\n            height: 1.8,//人物总高度。现有配置不能让人物高于2\r\n            sightHeight: 1.5,//眼部高度。现有配置不能让人物高于2\r\n            jumpHeight: 1.3,    //最大跳跃高度(并非砖块高度)\r\n            speedWalk: 5.7,     //最大行走速度\r\n            speedRun: 10,       //最大奔跑速度，连按w两次\r\n            accelerateRateStart: 0.3,//加速时加速比率。正数向前；负数反向；0不会加速；绝对值大于等于1可立即到最大速度\r\n            accelerateRateStop: 0.8,//停止时减速比率。范围[0-1]。0时立即停止，1时不会减速\r\n            thickness: 0.6,//人物的边长\r\n        };\r\n        this.init(camera, domElement);\r\n        MCFirstPersonControl._instance = this;\r\n        return MCFirstPersonControl._instance;\r\n    }\r\n\r\n    init(camera, domElement) {\r\n        this.controls = new PointerLockControls(camera, domElement);\r\n        //增加遮罩层\r\n        {\r\n            let blocker = document.createElement(\"div\");\r\n            blocker.style.position = \"absolute\";\r\n            blocker.style.zIndex = \"100\";\r\n            blocker.style.width = \"100%\";\r\n            blocker.style.height = \"100%\";\r\n            blocker.style.top = \"0\";\r\n            blocker.style.left = \"0\";\r\n            blocker.id = \"blocker\";\r\n            // blocker.style.backgroundColor = \"rgba(0, 0, 0, 0.4)\";\r\n            document.body.append(blocker);\r\n            blocker.addEventListener('click', () => {\r\n                this.controls.lock();\r\n            }, false);\r\n            this.controls.addEventListener('lock', function () {\r\n                blocker.style.display = 'none';\r\n            });\r\n            this.controls.addEventListener('unlock', function () {\r\n                blocker.style.display = 'block';\r\n            });\r\n        }\r\n        //添加准星\r\n        {\r\n            let aimX = document.createElement(\"div\");\r\n            aimX.style.height = \"2px\";\r\n            aimX.style.width = \"20px\";\r\n            setAimStyle(aimX);\r\n            document.body.append(aimX);\r\n            let aimY = document.createElement(\"div\");\r\n            aimY.style.height = \"20px\";\r\n            aimY.style.width = \"2px\";\r\n            setAimStyle(aimY);\r\n            document.body.append(aimY);\r\n        }\r\n        //加按键事件\r\n        let onKeyDown = (event) => {\r\n            switch (event.keyCode) {\r\n                case 38: // up\r\n                case 87: // w\r\n                    if (this.moveForward) {\r\n                        break;\r\n                    }\r\n                    if (!this.preRuning) {\r\n                        this.preRuning = performance.now();\r\n                    } else {\r\n                        this.isRunning = performance.now() - this.preRuning <= 200;\r\n                        this.preRuning = performance.now();\r\n                    }\r\n                    this.moveForward = true;\r\n                    break;\r\n\r\n                case 37: // left\r\n                case 65: // a\r\n                    if (this.moveLeft) {\r\n                        break;\r\n                    }\r\n                    this.moveLeft = true;\r\n                    break;\r\n\r\n                case 40: // down\r\n                case 83: // s\r\n                    if (this.moveBackward) {\r\n                        break;\r\n                    }\r\n                    this.moveBackward = true;\r\n                    break;\r\n\r\n                case 39: // right\r\n                case 68: // d\r\n                    if (this.moveRight) {\r\n                        break;\r\n                    }\r\n                    this.moveRight = true;\r\n                    break;\r\n\r\n                case 32: // space\r\n                    //7.74是60开平方\r\n                    if (this.canJump) this.velocity.y += Math.sqrt(2 * this.worldOption.g * 7.74 * this.personOption.jumpHeight);\r\n                    this.canJump = false;\r\n                    break;\r\n\r\n            }\r\n\r\n        };\r\n        let onKeyUp = (event) => {\r\n            switch (event.keyCode) {\r\n                case 38: // up\r\n                case 87: // w\r\n                    this.isRunning = false;\r\n                    this.moveForward = false;\r\n                    break;\r\n\r\n                case 37: // left\r\n                case 65: // a\r\n                    this.moveLeft = false;\r\n                    break;\r\n\r\n                case 40: // down\r\n                case 83: // s\r\n                    this.moveBackward = false;\r\n                    break;\r\n\r\n                case 39: // right\r\n                case 68: // d\r\n                    this.moveRight = false;\r\n                    break;\r\n\r\n            }\r\n\r\n        };\r\n        document.addEventListener('keydown', onKeyDown, false);\r\n        document.addEventListener('keyup', onKeyUp, false);\r\n        //加水平方向碰撞检测  。0,1脚底；2,3腰；4,5头顶; 6,7腿中间(半砖)； 8,9头中间(半砖)\r\n        for (let i = 0; i < 10; i++) {\r\n            this.checkRay.X0.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(-1, 0, 0), 0, 0));\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            this.checkRay.X1.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(1, 0, 0), 0, 0));\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            this.checkRay.Z0.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, 0, -1), 0, 0));\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            this.checkRay.Z1.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, 0, 1), 0, 0));\r\n        }\r\n        //加垂直方向碰撞检测\r\n        for (let i = 0; i < 4; i++) {\r\n            this.checkRay.Y0.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, -1, 0), 0, 0));\r\n        }\r\n        for (let i = 0; i < 4; i++) {\r\n            this.checkRay.Y1.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, 1, 0), 0, 0));\r\n        }\r\n        //初始化点击功能\r\n        this.initMouseFunction();\r\n        //加载预览方块\r\n        this.initPreviewCube();\r\n    }\r\n\r\n    update(delta) {\r\n        // console.log(this.objects.length)\r\n        delta = delta || 0.016;\r\n        if (!this.controls.isLocked) {\r\n            this.moveForward = false;\r\n            this.moveBackward = false;\r\n            this.moveLeft = false;\r\n            this.moveRight = false;\r\n        }\r\n        //水平方向移动+碰撞检测\r\n        {\r\n            this.direction.z = Number(this.moveForward) - Number(this.moveBackward);\r\n            this.direction.x = Number(this.moveRight) - Number(this.moveLeft);\r\n            this.direction.normalize(); // this ensures consistent movements in all directions\r\n            let velocityXZMax = this.isRunning ? this.personOption.speedRun : this.personOption.speedWalk;\r\n\r\n            if (this.moveForward || this.moveBackward) {\r\n                let velocityZTmp = this.velocity.z + this.direction.z * velocityXZMax * this.personOption.accelerateRateStart;\r\n                if (Math.abs(velocityZTmp) < velocityXZMax) {\r\n                    this.velocity.z = velocityZTmp;\r\n                } else {\r\n                    this.velocity.z = this.direction.z * velocityXZMax;\r\n                }\r\n            } else {\r\n                this.velocity.z = Math.abs(this.velocity.z) > 1 ? this.velocity.z * (this.personOption.accelerateRateStop) : 0;\r\n            }\r\n\r\n            if (this.moveLeft || this.moveRight) {\r\n                let velocityXTmp = this.velocity.x + this.direction.x * velocityXZMax * this.personOption.accelerateRateStart;\r\n                if (Math.abs(velocityXTmp) < velocityXZMax) {\r\n                    this.velocity.x = velocityXTmp;\r\n                } else {\r\n                    this.velocity.x = this.direction.x * velocityXZMax;\r\n                }\r\n            } else {\r\n                this.velocity.x = Math.abs(this.velocity.x) > 1 ? this.velocity.x * (this.personOption.accelerateRateStop) : 0;\r\n            }\r\n\r\n            let positionBeforeX = this.controls.getObject().position.x;\r\n            let positionBeforeZ = this.controls.getObject().position.z;\r\n\r\n            this.controls.moveForward(this.velocity.z * delta);\r\n            this.controls.moveRight(this.velocity.x * delta);\r\n\r\n            //横向碰撞检测辅助参数\r\n            const checkPositionOptions = [\r\n                -(this.personOption.sightHeight - 0.05),\r\n                -(this.personOption.sightHeight - this.personOption.height / 2),\r\n                (this.personOption.height - this.personOption.sightHeight - 0.05),\r\n                -(this.personOption.sightHeight - 0.5),\r\n                (this.personOption.height - this.personOption.sightHeight - 0.5)\r\n            ];\r\n            let rayMove = this.personOption.thickness / 2;\r\n\r\n            {//z轴碰撞检测\r\n\r\n                let Z0Flat = undefined;//z负轴碰撞检测\r\n                let Z0NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        this.checkRay.Z0[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.Z0[i].ray.origin.x = positionBeforeX;//修正为移动前的x轴位置，防止使用位移后的位置检测墙壁\r\n                        this.checkRay.Z0[i].ray.origin.x += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.Z0[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.Z0[i].intersectObjects(this.objects);\r\n                        if (intersections.length > 0) {\r\n                            Z0NearFlatTmp = intersections[0].point.z;\r\n                            Z0Flat = Math.max(Z0Flat === undefined ? Z0NearFlatTmp : Z0Flat, Z0NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let Z1Flat = undefined;//z正轴碰撞检测\r\n                let Z1NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        this.checkRay.Z1[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.Z1[i].ray.origin.x = positionBeforeX;\r\n                        this.checkRay.Z1[i].ray.origin.x += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.Z1[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.Z1[i].intersectObjects(this.objects);\r\n                        if (intersections.length > 0) {\r\n                            Z1NearFlatTmp = intersections[0].point.z;\r\n                            Z1Flat = Math.min(Z1Flat === undefined ? Z1NearFlatTmp : Z1Flat, Z1NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let nextZ = this.controls.getObject().position.z;\r\n                nextZ = Math.min(Z1Flat === undefined ? nextZ : (Z1Flat - this.personOption.thickness / 2 - 0.01), nextZ);\r\n                nextZ = Math.max(Z0Flat === undefined ? nextZ : (Z0Flat + this.personOption.thickness / 2 + 0.01), nextZ);\r\n                this.controls.getObject().position.z = nextZ\r\n            }\r\n\r\n            {//x轴碰撞检测\r\n                let X0Flat = undefined;//x负轴碰撞检测\r\n                let X0NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        this.checkRay.X0[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.X0[i].ray.origin.z = positionBeforeZ;\r\n                        this.checkRay.X0[i].ray.origin.z += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.X0[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.X0[i].intersectObjects(this.objects);\r\n                        if (intersections.length > 0) {\r\n                            X0NearFlatTmp = intersections[0].point.x;\r\n                            X0Flat = Math.max(X0Flat === undefined ? X0NearFlatTmp : X0Flat, X0NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let X1Flat = undefined;//x正轴碰撞检测\r\n                let X1NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        this.checkRay.X1[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.X1[i].ray.origin.z = positionBeforeZ;\r\n                        this.checkRay.X1[i].ray.origin.z += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.X1[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.X1[i].intersectObjects(this.objects);\r\n                        if (intersections.length > 0) {\r\n                            X1NearFlatTmp = intersections[0].point.x;\r\n                            X1Flat = Math.min(X1Flat === undefined ? X1NearFlatTmp : X1Flat, X1NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let nextX = this.controls.getObject().position.x;\r\n                nextX = Math.max(X0Flat === undefined ? nextX : (X0Flat + this.personOption.thickness / 2 + 0.01), nextX);\r\n                nextX = Math.min(X1Flat === undefined ? nextX : (X1Flat - this.personOption.thickness / 2 - 0.01), nextX);\r\n                this.controls.getObject().position.x = nextX\r\n                // console.log(Z0Flat,Z1Flat,X0Flat,X1Flat)\r\n            }\r\n            // console.log(this.controls.getObject().position.x,this.controls.getObject().position.y,this.controls.getObject().position.z)\r\n        }\r\n        //垂直方向移动+碰撞检测\r\n        {\r\n            let bottomFlatY = undefined;\r\n            //坠落四角检测\r\n            {\r\n                for (let i = 0; i < 4; i++) {\r\n                    this.checkRay.Y0[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                }\r\n                let rayMove = this.personOption.thickness / 2;\r\n                this.checkRay.Y0[0].ray.origin.x += rayMove;\r\n                this.checkRay.Y0[0].ray.origin.z -= rayMove;\r\n                this.checkRay.Y0[1].ray.origin.x += rayMove;\r\n                this.checkRay.Y0[1].ray.origin.z += rayMove;\r\n                this.checkRay.Y0[2].ray.origin.x -= rayMove;\r\n                this.checkRay.Y0[2].ray.origin.z += rayMove;\r\n                this.checkRay.Y0[3].ray.origin.x -= rayMove;\r\n                this.checkRay.Y0[3].ray.origin.z -= rayMove;\r\n                for (let i = 0; i < 4; i++) {\r\n                    let intersections = this.checkRay.Y0[i].intersectObjects(this.objects);\r\n                    if (intersections.length > 0) {\r\n                        let bottomFlatYTmp = intersections[0].point.y;\r\n                        bottomFlatY = Math.max(bottomFlatY === undefined ? bottomFlatYTmp : bottomFlatY, bottomFlatYTmp);\r\n                    }\r\n                }\r\n            }\r\n            //头顶四角检测\r\n            let topFlatY = undefined;\r\n            {\r\n                for (let i = 0; i < 4; i++) {\r\n                    this.checkRay.Y1[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                }\r\n                let rayMove = this.personOption.thickness / 2 - 0.001;\r\n                this.checkRay.Y1[0].ray.origin.x += rayMove;\r\n                this.checkRay.Y1[0].ray.origin.z -= rayMove;\r\n                this.checkRay.Y1[1].ray.origin.x += rayMove;\r\n                this.checkRay.Y1[1].ray.origin.z += rayMove;\r\n                this.checkRay.Y1[2].ray.origin.x -= rayMove;\r\n                this.checkRay.Y1[2].ray.origin.z += rayMove;\r\n                this.checkRay.Y1[3].ray.origin.x -= rayMove;\r\n                this.checkRay.Y1[3].ray.origin.z -= rayMove;\r\n                for (let i = 0; i < 4; i++) {\r\n                    let intersections = this.checkRay.Y1[i].intersectObjects(this.objects);\r\n                    if (intersections.length > 0) {\r\n                        let topFlatYTmp = intersections[0].point.y;\r\n                        topFlatY = Math.min(topFlatY === undefined ? topFlatYTmp : topFlatY, topFlatYTmp);\r\n                    }\r\n                }\r\n            }\r\n            //无碰撞时下次垂直位置(相机位置)\r\n            let nextY = this.controls.getObject().position.y + (this.velocity.y * delta);\r\n            if (topFlatY !== undefined) {\r\n                if (nextY > topFlatY - (this.personOption.height - this.personOption.sightHeight)) {\r\n                    nextY = topFlatY - (this.personOption.height - this.personOption.sightHeight)\r\n                    this.velocity.y = 0;\r\n                }\r\n            }\r\n            if (bottomFlatY !== undefined) {\r\n                //下方检测到平台时，脚部不能低于最低平台\r\n                nextY = Math.max(bottomFlatY + this.personOption.sightHeight, nextY);\r\n                if (nextY === bottomFlatY + this.personOption.sightHeight) {\r\n                    this.velocity.y = 0;\r\n                    this.canJump = true;\r\n                } else {\r\n                    this.velocity.y -= this.worldOption.g * Math.sqrt(delta);\r\n                }\r\n            } else {\r\n                //下方未检测到平台时\r\n                this.velocity.y -= this.worldOption.g * Math.sqrt(delta);\r\n            }\r\n            this.controls.getObject().position.y = nextY;\r\n        }\r\n        //掉落位置重置\r\n        if (this.controls.getObject().position.y < -500) {\r\n            this.velocity.y = 0;\r\n            this.controls.getObject().position.y = 500;\r\n            this.controls.getObject().position.x = 0;\r\n            this.controls.getObject().position.z = 0;\r\n        }\r\n        this.updatePreviewCube();\r\n    }\r\n\r\n    initMouseFunction() {\r\n        //点击功能\r\n        window.addEventListener('mousedown', (event) => {\r\n            let clickedObjects = getClickedObject(this.objects, this.camera);//this.scene.children\r\n            if (clickedObjects.length > 0) {\r\n                console.log(\"点击对象【\" + clickedObjects[0].object.name + \"】\", clickedObjects[0]);\r\n                if (\r\n                    clickedObjects[0]\r\n                    && clickedObjects[0].distance <= 10\r\n                    && clickedObjects[0].face && clickedObjects[0].face.normal\r\n                    && clickedObjects[0].object && clickedObjects[0].object.position\r\n                ) {\r\n                    if (event.button === 0) {//删除方块 左键\r\n                        //TODO 改为长按同一方块时才删除\r\n                        // console.log(clickedObjects[0].object, this.scene.getObjectByName(clickedObjects[0].object.name));\r\n                        let index = this.objects.findIndex(e => e.id === clickedObjects[0].object.id);\r\n                        if (index >= 0) {\r\n                            this.objects.splice(index, 1);\r\n                        }\r\n                        this.scene.remove(this.scene.getObjectById(clickedObjects[0].object.id));\r\n                        return;\r\n                    }\r\n                    if (event.button === 2) {//添加方块 右键\r\n                        //TODO 添加方块代码独立，方块不能添加到人物所站的地方\r\n                        let normal = clickedObjects[0].face.normal;\r\n                        let rotate = clickedObjects[0].object.rotation;\r\n                        let position = clickedObjects[0].object.position;\r\n                        let point = clickedObjects[0].point;\r\n\r\n                        let targetIsHalfCube = DefaultCube[clickedObjects[0].object.userData.cubeTypeKey].cubeAttributes && DefaultCube[clickedObjects[0].object.userData.cubeTypeKey].cubeAttributes.geometryType === 'halfCube';\r\n                        let newIsHalfCube = DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes && DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes.geometryType === 'halfCube';\r\n                        let newIsStairsCube = DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes && DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes.geometryType === 'stairsCube';\r\n\r\n                        let newPositionVector = new THREE.Vector3(normal.x, normal.y, normal.z);\r\n                        newPositionVector = newPositionVector.applyAxisAngle(new THREE.Vector3(0, 0, 1), rotate.z);\r\n                        newPositionVector = newPositionVector.applyAxisAngle(new THREE.Vector3(0, 1, 0), rotate.y);\r\n                        newPositionVector = newPositionVector.applyAxisAngle(new THREE.Vector3(1, 0, 0), rotate.x);\r\n                        newPositionVector.round();\r\n\r\n                        let yMove = newPositionVector.y;\r\n                        {\r\n                            if (targetIsHalfCube) {\r\n                                if (newIsHalfCube) {\r\n                                    if (newPositionVector.y !== 0) {\r\n                                        yMove = newPositionVector.y / 2\r\n                                    }\r\n                                } else {\r\n                                    if (newPositionVector.y !== 0) {\r\n                                        if (position.y > 0 ? position.y % 1 === 0.25 : position.y % 1 === -0.75) {\r\n                                            yMove = newPositionVector.y * (newPositionVector.y > 0 ? 3 : 5) / 4  //上半砖\r\n                                        } else {\r\n                                            yMove = newPositionVector.y * (newPositionVector.y > 0 ? 5 : 3) / 4  //下半砖\r\n                                        }\r\n                                    } else {\r\n                                        if (position.y > 0 ? position.y % 1 === 0.25 : position.y % 1 === -0.75) {\r\n                                            yMove = -1 / 4  //上半砖\r\n                                        } else {\r\n                                            yMove = 1 / 4  //下半砖\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (newIsHalfCube) {\r\n                                    if (newPositionVector.y !== 0) {\r\n                                        yMove = newPositionVector.y * 3 / 4;\r\n                                    } else {\r\n                                        yMove = (point.y > position.y ? 1 : -1) / 4;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        let newPosition = {\r\n                            x: position.x + newPositionVector.x,\r\n                            y: position.y + yMove,\r\n                            z: position.z + newPositionVector.z,\r\n                        };\r\n                        if (!newIsHalfCube && checkPositionIsExistBlock(newPosition, this.objects)) {\r\n                            return;\r\n                        }\r\n                        let newDirectionRotate = {\r\n                            x: 0,\r\n                            y: 0,\r\n                            z: 0,\r\n                        };\r\n                        if (!newIsHalfCube) {//放置 转向\r\n                            let newDirection;\r\n                            let worldDirection = this.camera.getWorldDirection(new Vector3(1, 0, 0));\r\n                            if (Math.abs(worldDirection.x) >= Math.abs(worldDirection.z)) {\r\n                                newDirection = new Vector3(-worldDirection.x, 0, 0)\r\n                            } else {\r\n                                newDirection = new Vector3(0, 0, -worldDirection.z)\r\n                            }\r\n                            newDirection.normalize().round();\r\n                            if (Math.abs(worldDirection.y) >= 0.5) {\r\n                                newDirection.y = worldDirection.y > 0 ? 1 : -1\r\n                            }\r\n                            //x，z轴旋转\r\n                            if (newDirection.x === 1) {\r\n                                newDirectionRotate.y = 0;\r\n                            } else if (newDirection.x === -1) {\r\n                                newDirectionRotate.y = 180;\r\n                            } else if (newDirection.z === 1) {\r\n                                newDirectionRotate.y = -90;\r\n                            } else if (newDirection.z === -1) {\r\n                                newDirectionRotate.y = 90;\r\n                            }\r\n                            //y轴旋转\r\n                            if (newDirection.y !== 0) {\r\n                                newDirectionRotate.z = newDirection.y > 0 ? -90 : 90;\r\n                            }\r\n                            newDirectionRotate.z += 90;//放置时方块顶部面冲玩家\r\n                        }\r\n                        if (newIsStairsCube) {\r\n                            newDirectionRotate.z = 0;\r\n                        }\r\n                        let cubeFactory = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]);\r\n                        let cube = cubeFactory.buildCube(newPosition.x, newPosition.y, newPosition.z, DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]], 0, newDirectionRotate.y, newDirectionRotate.z);\r\n                        this.scene.add(cube);\r\n                        this.objects.push(cube);\r\n                    }\r\n                }\r\n            }\r\n        }, false);\r\n        //滑轮功能\r\n        {\r\n            if (document.addEventListener) {//firefox\r\n                document.addEventListener('DOMMouseScroll', (e) => {\r\n                    e = e || window.event;\r\n                    if (e.wheelDelta) { //第一步：先判断浏览器IE，谷歌滑轮事件\r\n                        this.changeCurrentCubeTypeIndex(e.wheelDelta < 0);\r\n                    } else if (e.detail) { //Firefox滑轮事件\r\n                        this.changeCurrentCubeTypeIndex(e.detail < 0);\r\n                    }\r\n                }, false);\r\n            }\r\n            //滚动滑轮触发scrollFunc方法 //ie 谷歌\r\n            window.onmousewheel = (e) => {\r\n                console.log('滑轮', this.currentCubeTypeIndex);\r\n                e = e || window.event;\r\n                if (e.wheelDelta) { //第一步：先判断浏览器IE，谷歌滑轮事件\r\n                    this.changeCurrentCubeTypeIndex(e.wheelDelta < 0);\r\n                } else if (e.detail) { //Firefox滑轮事件\r\n                    this.changeCurrentCubeTypeIndex(e.detail < 0);\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    changeCurrentCubeTypeIndex(isNext) {\r\n        if (isNext) {\r\n            this.currentCubeTypeIndex++;\r\n            if (this.currentCubeTypeIndex === Object.keys(DefaultCube).length) {\r\n                this.currentCubeTypeIndex = 0;\r\n            }\r\n        } else {\r\n            if (this.currentCubeTypeIndex === 0) {\r\n                this.currentCubeTypeIndex = Object.keys(DefaultCube).length;\r\n            }\r\n            this.currentCubeTypeIndex--;\r\n        }\r\n    }\r\n\r\n    getCurrentCubeTypeIndex(plusValue) {\r\n        let result = this.currentCubeTypeIndex + (plusValue || 0) % Object.keys(DefaultCube).length;\r\n        if (result >= 0) {\r\n            return result;\r\n        } else {\r\n            return Object.keys(DefaultCube).length - 1 + result\r\n        }\r\n    }\r\n\r\n    initPreviewCube() {\r\n        this.previewCube = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]).buildCube();\r\n        this.scene.add(this.previewCube);\r\n    }\r\n\r\n    updatePreviewCube() {\r\n        //形状刷新\r\n        {\r\n            if (!this.previewCube.geometryMap) {\r\n                this.previewCube.geometryMap = {};\r\n            }\r\n\r\n            if (this.previewCubeType !== Object.keys(DefaultCube)[this.currentCubeTypeIndex]) {\r\n                this.previewCubeType = Object.keys(DefaultCube)[this.currentCubeTypeIndex];\r\n                if (this.previewCube.geometryMap[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]) {\r\n                    this.previewCube.geometry = this.previewCube.geometryMap[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]\r\n                } else {\r\n                    let previewGeometry = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.getCurrentCubeTypeIndex()]])._geometry.clone();\r\n                    previewGeometry.scale(0.01, 0.01, 0.01);\r\n                    this.previewCube.geometry = previewGeometry;\r\n                    this.previewCube.geometryMap[Object.keys(DefaultCube)[this.currentCubeTypeIndex]] = previewGeometry;\r\n                }\r\n            }\r\n        }\r\n        //材质刷新\r\n        this.previewCube.material = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.getCurrentCubeTypeIndex()]])._materials;\r\n        //位置刷新\r\n        this.previewCube.position.copy(this.camera.position);\r\n        //旋转刷新\r\n        {\r\n            {\r\n                if (!this.previewCubeRotation) {\r\n                    this.previewCubeRotation = {\r\n                        y: 0,\r\n                    }\r\n                } else {\r\n                    this.previewCubeRotation.y += Math.PI / 180;\r\n                }\r\n            }\r\n            this.previewCube.rotation.copy(this.camera.rotation);\r\n            this.previewCube.position.add(\r\n                new Vector3(0, -0.065, -0.2)\r\n                    .applyAxisAngle(new Vector3(0, 0, 1), this.camera.rotation.z)\r\n                    .applyAxisAngle(new Vector3(0, 1, 0), this.camera.rotation.y)\r\n                    .applyAxisAngle(new Vector3(1, 0, 0), this.camera.rotation.x)\r\n            );\r\n            this.previewCube.rotateY(Math.PI / 4 + this.previewCubeRotation.y)\r\n        }\r\n    }\r\n}\r\n\r\nfunction setAimStyle(aimEl) {\r\n    aimEl.style.position = \"fixed\";\r\n    aimEl.style.left = \"50%\";\r\n    aimEl.style.top = \"50%\";\r\n    aimEl.style.transform = \"translate(-50%,-50%)\";\r\n    aimEl.style.zIndex = \"1\";\r\n    aimEl.style.fontSize = \"100%\";\r\n    aimEl.style.fontWeight = \"bold\";\r\n    aimEl.style.textAlign = \"center\";\r\n    aimEl.style.verticalAlign = \"middle\";\r\n    aimEl.style.lineHeight = \"10px\";\r\n    aimEl.style.fontFamily = \"\\\"Times New Roman\\\",serif\";\r\n    aimEl.style.backgroundColor = \"#E0E0E0\";\r\n}\r\n\r\n//获取点击的对象\r\nfunction getClickedObject(objects, camera) {\r\n    let raycaster = new THREE.Raycaster();\r\n    let aim = new THREE.Vector2();\r\n    //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\r\n    aim.x = 0;\r\n    aim.y = 0;\r\n    // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n    raycaster.setFromCamera(aim, camera);\r\n    // 获取raycaster直线和所有模型相交的数组集合\r\n    return raycaster.intersectObjects(objects);\r\n}\r\n\r\n//检测新方块要放的位置是否已经有放快了\r\nfunction checkPositionIsExistBlock(position, positionArray) {\r\n    for (let positionTmp of positionArray) {\r\n        if (Math.round(positionTmp.position.x) === Math.round(position.x)\r\n            &&\r\n            Math.round(positionTmp.position.y) === Math.round(position.y)\r\n            &&\r\n            Math.round(positionTmp.position.z) === Math.round(position.z)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n","import * as THREE from 'three'\r\nimport {WEBGL} from \"three/examples/jsm/WebGL.js\";\r\n// import TWEEN from \"@tweenjs/tween.js\";//动作库\r\nimport CubeFactory from \"./utils/objects/cube/CubeFactory.js\";\r\nimport StatsWindow from \"./utils/stats/StatsWindow.js\";\r\nimport {initAmbientLight, getAmbientLightIntensity, lightHighIntensity, lightLowIntensity, lightCurrentIntensity, lightValueBecomeHigher, initDirectionalLight, getDirectionalLightIntensity} from \"./utils/basic/Light\";\r\nimport {initBGMPlayer} from \"./utils/sound/Bgm\";\r\nimport {initScene} from \"./utils/basic/Scene\";\r\nimport {initCamera} from \"./utils/basic/Camera\";\r\nimport {initRenderer} from \"./utils/basic/Renderer\";\r\nimport {initControls} from \"./utils/controls/ControlBuilder\";\r\nimport {SceneUtils} from 'three/examples/jsm/utils/SceneUtils.js';\r\nimport DefaultCube from \"./utils/objects/cube/DefaultCube\";\r\nimport GlobalSetting from \"./utils/setting/GlobalSetting\";\r\nimport device from \"current-device\";\r\n\r\n\r\n// 检查设备\r\nif (device.type === 'mobile') {\r\n    let divEl = document.createElement('div');\r\n    divEl.style.position = \"absolute\";\r\n    divEl.style.top = \"35%\";\r\n    divEl.style.width = \"100%\";\r\n    divEl.style.zIndex = \"1000\";\r\n    divEl.style.textAlign = 'center';\r\n    divEl.style.fontWeight = 'bold';\r\n    divEl.style.color = 'gray';\r\n    divEl.style.fontSize = '1em';\r\n    let spanEl1 = document.createElement('span');\r\n    spanEl1.style.fontSize = '1.5em';\r\n    spanEl1.innerText = \"手机不可以 :(\";\r\n    let spanEl2 = document.createElement('span');\r\n    spanEl2.innerText = \"Cell phone is not OK :(\";\r\n    let spanEl3 = document.createElement('span');\r\n    spanEl3.style.fontSize = '1.5em';\r\n    spanEl3.innerText = \"还是用电脑试试吧 :)\";\r\n    let spanEl4 = document.createElement('span');\r\n    spanEl4.innerText = \"Let's try it with computer :)\";\r\n    divEl.append(spanEl1, document.createElement('br'), spanEl2, document.createElement('br'), spanEl3, document.createElement('br'), spanEl4);\r\n    document.body.appendChild(divEl);\r\n    throw \"unsupport platform\";\r\n}\r\n\r\nif (!WEBGL.isWebGLAvailable()) {\r\n    let divEl = document.createElement('div');\r\n    divEl.style.position = \"absolute\";\r\n    divEl.style.top = \"35%\";\r\n    divEl.style.width = \"100%\";\r\n    divEl.style.zIndex = \"1000\";\r\n    divEl.style.textAlign = 'center';\r\n    divEl.style.fontWeight = 'bold';\r\n    divEl.style.color = 'gray';\r\n    divEl.style.fontSize = '1em';\r\n    let spanEl1 = document.createElement('span');\r\n    spanEl1.style.fontSize = '1.5em';\r\n    spanEl1.innerText = \"这个浏览器不太行 :(\";\r\n    let spanEl2 = document.createElement('span');\r\n    spanEl2.innerText = \"This browser doesn't work well :(\";\r\n    let spanEl3 = document.createElement('span');\r\n    spanEl3.style.fontSize = '1.5em';\r\n    spanEl3.innerText = \"还是用流行的浏览器试试吧 :)\";\r\n    let spanEl4 = document.createElement('span');\r\n    spanEl4.innerText = \"Let's try it with a popular browser :)\";\r\n    divEl.append(spanEl1, document.createElement('br'), spanEl2, document.createElement('br'), spanEl3, document.createElement('br'), spanEl4);\r\n    document.body.appendChild(divEl);\r\n    document.body.appendChild(WEBGL.getWebGLErrorMessage());\r\n    throw \"unsupport browser\";\r\n}\r\n//------------------------------------初始化基本对象-结束------------------------------------------------\r\n\r\nlet canvasEL = document.getElementById(\"canvas-frame\");\r\n// 舞台*\r\nlet scene = initScene();\r\n// 光源*\r\nlet lightAmbient = initAmbientLight();\r\nscene.add(lightAmbient);\r\nlet lightDirectional;\r\nif (GlobalSetting.enableShadow) {\r\n    lightDirectional = initDirectionalLight();\r\n    scene.add(lightDirectional);\r\n}\r\n\r\n// 相机*\r\nlet camera = initCamera();\r\ncamera.aspect = canvasEL.offsetWidth / canvasEL.offsetHeight;\r\ncamera.updateProjectionMatrix();\r\nscene.add(camera);\r\n// 渲染器*\r\nlet renderer = initRenderer();\r\nrenderer.setSize(canvasEL.offsetWidth, canvasEL.offsetHeight);\r\nrenderer.setPixelRatio(window.devicePixelRatio);\r\ndocument.getElementById('canvas-frame').appendChild(renderer.domElement);\r\n// 收集所欲加入到场景的方块对象\r\nlet objects = [];\r\n// 相机控制器\r\nlet controls = initControls(\"MCFirstPersonControl\", scene, camera, renderer, objects);\r\n//------------------------------------初始化基本对象-结束------------------------------------------------\r\n//-----------以下为物体添加代码---------------------------------------------------------------\r\nlet lightOption = {\r\n    current: lightCurrentIntensity,\r\n    low: lightLowIntensity,\r\n    high: lightHighIntensity,\r\n    becomeHigher: lightValueBecomeHigher\r\n};\r\n\r\nfunction changeLight() {\r\n    lightAmbient.intensity = getAmbientLightIntensity(lightOption.current, lightOption.high, lightOption.low);\r\n    if (GlobalSetting.enableShadow) {\r\n        lightDirectional.intensity = getDirectionalLightIntensity(lightOption.current, lightOption.high, lightOption.low);\r\n    }\r\n    if (lightOption.becomeHigher) {\r\n        let tmp = lightOption.current >= lightOption.low - (lightOption.high - lightOption.low);\r\n        if (tmp) {\r\n            lightOption.current -= 0.002;\r\n        } else {\r\n            lightOption.becomeHigher = false;\r\n        }\r\n    } else {\r\n        if (lightOption.current <= lightOption.high + (lightOption.high - lightOption.low)) {\r\n            lightOption.current += 0.002;\r\n        } else {\r\n            if (lightOption.current > 1.5) {\r\n                lightOption.becomeHigher = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n(function addGrassCubes() {\r\n    let cubeFactory = new CubeFactory(DefaultCube.grass);\r\n    {\r\n        let testBlock = [];\r\n        let width = 10;\r\n        //底板\r\n        for (let x = -width; x < width; x++) {\r\n            for (let z = -width; z < width; z++) {\r\n                testBlock.push([x, -1, z]);\r\n            }\r\n        }\r\n        //阶梯\r\n        for (let x = 0; x < 5; x++) {\r\n            for (let z = 0; z < 5; z++) {\r\n                for (let y = 0; y < 5; y++) {\r\n                    if (y >= x) {\r\n                        testBlock.push([x - 7, y - x, z - 7])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //土堆\r\n        {\r\n            let mountainHeight = 4;\r\n            for (let y = 0; y < mountainHeight; y++) {\r\n                for (let x = y; x < 2 * mountainHeight - y; x++) {\r\n                    for (let z = y; z < 2 * mountainHeight - y; z++) {\r\n                        testBlock.push([x - 5, y, z + 1])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //碰撞检测用\r\n        {\r\n            for (let x = 0; x < 5; x++) {\r\n                for (let z = 0; z < 5; z++) {\r\n                    if (x !== 2 || z !== 2) {\r\n                        testBlock.push([x, 0, z - 5]);\r\n                    }\r\n                }\r\n            }\r\n            testBlock.push([0, 1, -5]);\r\n            testBlock.push([3, 3, -5]);\r\n            testBlock.push([2, 3, -5]);\r\n            testBlock.push([3, 3, -4]);\r\n            testBlock.push([2, 3, -4]);\r\n            testBlock.push([3, 3, -6]);\r\n            testBlock.push([2, 3, -6]);\r\n            testBlock.push([3, 3, -7]);\r\n            testBlock.push([2, 3, -7]);\r\n            testBlock.push([3, 2, -8]);\r\n            testBlock.push([2, 2, -8]);\r\n            testBlock.push([5, 2, -4]);\r\n            testBlock.push([4, 2, -4]);\r\n        }\r\n\r\n        let zValue = -10;\r\n        let xValue = 8;\r\n        let yValue = 1;\r\n        for (let cubeType of Object.values(DefaultCube)) {\r\n            let idHalfCube = cubeType.cubeAttributes && cubeType.cubeAttributes.geometryType === 'halfCube';\r\n            testBlock.push([xValue, idHalfCube ? yValue - 1 / 4 : yValue, zValue++, cubeType]);\r\n            if (zValue === 10) {\r\n                yValue++;\r\n                zValue = -10;\r\n            }\r\n        }\r\n\r\n        testBlock.push([0, 15, 0, DefaultCube.grass]);\r\n\r\n\r\n        for (let cubeInfo of testBlock) {\r\n            let cube = cubeFactory.buildCube(...cubeInfo);\r\n\r\n            scene.add(cube);\r\n            objects.push(cube);\r\n        }\r\n    }\r\n})();\r\n\r\nlet prevTime = performance.now();\r\n\r\n(function animate() {\r\n    requestAnimationFrame(animate);\r\n    let time = performance.now();\r\n    let delta = (time - prevTime) / 1000;\r\n    prevTime = time;\r\n    // TWEEN.update(delta);\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n    new StatsWindow(\"canvas-frame\").stats.update(delta);\r\n    changeLight();\r\n})();\r\n\r\nwindow.onresize = () => {\r\n    //更新相机视角比例\r\n    camera.aspect = canvasEL.offsetWidth / canvasEL.offsetHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(canvasEL.offsetWidth, canvasEL.offsetHeight);\r\n};\r\n\r\nwindow.onload = () => {\r\n    initBGMPlayer();\r\n};\r\n","import * as THREE from 'three';\r\nexport function initScene() {\r\n    let scene = new THREE.Scene();\r\n    let backgroundColor= 0x87CEEB;\r\n    scene.name = 'SCENE';\r\n    scene.fog = new THREE.FogExp2(backgroundColor, 0.005);//雾效果\r\n    //增加天空盒\r\n    (function skyBox(backgroundType) {\r\n        backgroundType = backgroundType || 1;\r\n        let textureCube = new THREE.CubeTextureLoader().load([\r\n            './assets/img/1.png',\r\n            './assets/img/2.png',\r\n            './assets/img/3.png',\r\n            './assets/img/4.png',\r\n            './assets/img/5.png',\r\n            './assets/img/6.png'\r\n        ]);\r\n        if (backgroundType === 1) {//使用场景背景添加\r\n            scene.background = new THREE.Color(backgroundColor);\r\n        } else if (backgroundType === 2) {\r\n            scene.background = textureCube\r\n        } else {//使用盒子添加\r\n            //着色器\r\n            let cubeShader = THREE.ShaderLib[\"cube\"];\r\n            cubeShader.uniforms[\"tCube\"].value = textureCube;\r\n            let material = new THREE.ShaderMaterial({\r\n                fragmentShader: cubeShader.fragmentShader,  //定义自己的片元着色器\r\n                vertexShader: cubeShader.vertexShader,  //定义自己的顶点着色器\r\n                uniforms: cubeShader.uniforms,  //给着色器传入uniform变量的值\r\n                depthWrite: false,  //决定这个材质是否影响WebGL的深度缓存\r\n                side: THREE.BackSide,  //侧面：反面\r\n            });\r\n            //创建方盒子\r\n            let cubeWithPic = new THREE.Mesh(new THREE.CubeGeometry(1000000, 1000000, 1000000), material);\r\n            scene.add(cubeWithPic);\r\n        }\r\n    })(1);\r\n    return scene;\r\n}","import * as THREE from \"three\";\r\n\r\nexport function initCamera() {\r\n    let camera = new THREE.PerspectiveCamera();\r\n    camera.name = \"CAMERA\";\r\n    camera.fov = 45; //fov表示摄像机视锥体垂直视野角度，最小值为0，最大值为180，默认值为50，实际项目中一般都定义45，因为45最接近人正常睁眼角度\r\n    // camera.aspect = width / height; //aspect表示摄像机视锥体长宽比，默认长宽比为1，即表示看到的是正方形，实际项目中使用的是屏幕的宽高比\r\n    camera.near = 0.1; //near表示摄像机视锥体近端面，这个值默认为0.1，实际项目中都会设置为1\r\n    camera.far = 1000; //far表示摄像机视锥体远端面，默认为2000，这个值可以是无限的，说的简单点就是我们视觉所能看到的最远距离\r\n    camera.position.x = 0;\r\n    camera.position.y = 10;\r\n    camera.position.z = 0;\r\n    return camera;\r\n}","import * as THREE from \"three\";\r\nimport GlobalSetting from \"../setting/GlobalSetting\";\r\n\r\nexport function initRenderer() {\r\n    let renderer = new THREE.WebGLRenderer();\r\n    renderer.name = 'RENDERER';\r\n    // renderer.antialias = true;//是否开启反锯齿\r\n    renderer.shadowMap.enabled =  GlobalSetting.enableShadow;\r\n    // renderer.shadowMap.type = THREE.PCFSoftShadowMap;//更柔和的影子，需要的性能更高\r\n    // renderer.setSize(width, height);\r\n    renderer.setClearColor(0xFFFFFF, 1.0);//背景颜色\r\n    return renderer\r\n}","import ShowOrbitControl from \"./ShowOrbitControl\";\r\nimport MCFirstPersonControl from \"./MCFirstPersonControl\";\r\n\r\nexport function initControls(controlsType,scene,camera,renderer,objects) {\r\n    let controls;\r\n    switch (controlsType) {\r\n        case \"ShowOrbitControl\":\r\n            let showOrbitControl = new ShowOrbitControl(camera, renderer.domElement);\r\n            showOrbitControl.initClickFunction(scene.children);\r\n            controls = showOrbitControl.controls;\r\n            break;\r\n        case \"MCFirstPersonControl\":\r\n            let mcFirstPersonControl = new MCFirstPersonControl(camera, renderer.domElement, objects, scene);\r\n            controls = mcFirstPersonControl;\r\n            break;\r\n    }\r\n    return controls;\r\n}","\r\nexport  function initBGMPlayer() {\r\n    let audioBGM;\r\n    let currentIndex = 0;\r\n    let arr = [//把需要播放的歌曲从后往前排，这里已添加两首音乐，可继续添加多个音乐\r\n        \"./assets/sound/calm1.ogg\",\r\n        \"./assets/sound/calm2.ogg\",\r\n        \"./assets/sound/calm3.ogg\",\r\n        \"./assets/sound/hal1.ogg\",\r\n        \"./assets/sound/hal2.ogg\",\r\n        \"./assets/sound/hal3.ogg\",\r\n        \"./assets/sound/hal4.ogg\",\r\n    ];\r\n    audioBGM = new Audio();\r\n    audioBGM.preload = \"true\";\r\n    audioBGM.controls = true;\r\n    audioBGM.autoplay = true;\r\n    // audioBGM.muted = true;\r\n    audioBGM.hidden = true;\r\n    audioBGM.style.display = \"none\";\r\n    audioBGM.style.position = \"fixed\";\r\n    audioBGM.style.top = \"0\";\r\n    audioBGM.style.right = \"0\";\r\n    audioBGM.style.zIndex = \"101\";\r\n    audioBGM.loop = false;//禁止循环，否则无法触发ended事件\r\n    audioBGM.src = arr[currentIndex];         //每次读数组最后一个元素\r\n    audioBGM.addEventListener('ended', playEndedHandler, false);\r\n    document.addEventListener('click', playHandler, false);\r\n    // audioBGM.play();\r\n    document.body.appendChild(audioBGM);\r\n\r\n    function playEndedHandler() {\r\n        currentIndex++;\r\n        if (currentIndex >= arr.length) {\r\n            currentIndex = 0;\r\n        }\r\n        audioBGM.src = arr[currentIndex];\r\n        audioBGM.play();\r\n        // myAudio.removeEventListener('ended', playEndedHandler, false);\r\n    }\r\n\r\n    function playHandler() {\r\n        audioBGM.play();\r\n        document.removeEventListener('click', playHandler, false);\r\n    }\r\n    return audioBGM;\r\n}"],"sourceRoot":""}