{"version":3,"sources":["webpack:///./src/utils/setting/GlobalSetting.js","webpack:///./src/utils/objects/cube/GeometryType.js","webpack:///./src/utils/objects/cube/ImagePoint.js","webpack:///./src/utils/objects/cube/CubeFactory.js","webpack:///./src/utils/stats/StatsWindow.js","webpack:///./src/utils/basic/Light.js","webpack:///./src/utils/controls/ShowOrbitControl.js","webpack:///./src/utils/objects/cube/DefaultCube.js","webpack:///./src/utils/controls/MCFirstPersonControl.js","webpack:///./src/index.js","webpack:///./src/utils/basic/Scene.js","webpack:///./src/utils/basic/Camera.js","webpack:///./src/utils/basic/Renderer.js","webpack:///./src/utils/controls/ControlBuilder.js","webpack:///./src/utils/sound/Bgm.js"],"names":["enableShadow","Cube","HalfCube","StairsCube","Flower1Cube","defaultCube","_instanceObj","key","this","cubeOptions","_materials","_materialsMap","_materialsHalfMap","_geometry","undefined","_geometryMap","_cubeSize","buildMaterials","buildGeometry","cubeAttributes","geometryType","geom","imagePoint","ImagePoint","width","innerWidth","Math","sqrt","GeometryType","vertices","faces","faceVertexUvs","computeFaceNormals","faceIndex","materialIndex","i","length","textureLoader","textureList","imageUrlIndex","images","imageUrl","push","texture","load","generateMipmaps","minFilter","magFilter","materialList","textureIndex","map","fog","materialParameters","materialParametersForOneList","keyIndex","imageSet","materialTmp","indexOf","materialNew","clone","textureNew","wrapS","wrapT","repeat","set","Number","transparent","depthWrite","side","opacity","x","y","z","rotateX","rotateY","rotateZ","position","rotation","mesh","receiveShadow","castShadow","GlobalSetting","userData","fullCubePosition","cubeTypeKey","meshParameters","rotateEnable","PI","name","canvasElId","_instance","stats","domElement","style","left","top","document","getElementById","appendChild","getAmbientLightIntensity","lightCurrentIntensity","lightHighIntensity","lightLowIntensity","min","max","getDirectionalLightIntensity","camera","controls","OrbitControls","dampingFactor","enablePan","objects","window","addEventListener","event","clickedObjects","raycaster","mouse","clientX","clientY","innerHeight","setFromCamera","intersectObjects","getClickedObject","obj","object","console","log","grass","color","isPenetrable","isIndestructible","test","dirt","dirt_podzol","diamond_block","cobblestone","cobblestone_mossy","stone","stone_slab","stonebrick","stonebrick_carved","stonebrick_cracked","stonebrick_mossy","brick","planks_birch","planks_acacia","planks_jungle","planks_oak","planks_spruce","log_acacia","leaves_acacia","leaves_acacia_opaque","log_birch","leaves_birch","leaves_birch_opaque","log_jungle","leaves_jungle","leaves_jungle_opaque","log_oak","leaves_oak","leaves_oak_opaque","log_spruce","leaves_spruce","leaves_spruce_opaque","glass","glass_black","glass_blue","glass_brown","glass_cyan","glass_gray","glass_green","glass_light_blue","glass_lime","glass_magenta","glass_orange","glass_pink","glass_purple","glass_red","glass_silver","glass_white","glass_yellow","glowstone","gold_block","gold_ore","clay","hardened_clay","hardened_clay_stained_black","hardened_clay_stained_blue","hardened_clay_stained_brown","hardened_clay_stained_cyan","hardened_clay_stained_gray","hardened_clay_stained_green","hardened_clay_stained_light_blue","hardened_clay_stained_lime","hardened_clay_stained_magenta","hardened_clay_stained_orange","hardened_clay_stained_pink","hardened_clay_stained_purple","hardened_clay_stained_red","hardened_clay_stained_silver","hardened_clay_stained_white","hardened_clay_stained_yellow","melon","pumpkin_face_off","pumpkin_face_on","test_half","stone_slab_half","brick_half","planks_birch_half","planks_acacia_half","planks_jungle_half","planks_oak_half","planks_spruce_half","cobblestone_stairs","cobblestone_mossy_stairs","stone_stairs","stone_slab_stairs","brick_stairs","planks_birch_stairs","planks_acacia_stairs","planks_jungle_stairs","planks_oak_stairs","planks_spruce_stairs","hay_block","sandstone_normal","sandstone_smooth","sandstone_carved","tnt","wool_colored_white","wool_colored_black","wool_colored_blue","wool_colored_brown","wool_colored_cyan","wool_colored_gray","wool_colored_green","wool_colored_light_blue","wool_colored_lime","wool_colored_magenta","wool_colored_orange","wool_colored_pink","wool_colored_purple","wool_colored_red","wool_colored_silver","wool_colored_yellow","flower_rose","flower_allium","flower_blue_orchid","flower_dandelion","flower_houstonia","flower_oxeye_daisy","flower_paeonia","flower_tulip_orange","flower_tulip_pink","flower_tulip_red","flower_tulip_white","scene","currentCubeTypeIndex","checkRay","X0","X1","Z0","Z1","Y0","Y1","moveForward","moveBackward","moveLeft","moveRight","preRuning","isRunning","canJump","velocity","direction","worldOption","g","personOption","height","sightHeight","jumpHeight","speedWalk","speedRun","accelerateRateStart","accelerateRateStop","thickness","init","PointerLockControls","blocker","createElement","zIndex","id","body","append","lock","display","aimX","setAimStyle","aimY","keyCode","performance","now","initMouseFunction","initPreviewCube","delta","objectsImpenetrable","filter","e","isLocked","normalize","velocityXZMax","velocityZTmp","abs","velocityXTmp","positionBeforeX","getObject","positionBeforeZ","checkPositionOptions","rayMove","Z0NearFlatTmp","Z0Flat","ray","origin","copy","floor","intersections","point","Z1NearFlatTmp","Z1Flat","nextZ","X0NearFlatTmp","X0Flat","X1NearFlatTmp","X1Flat","nextX","bottomFlatY","bottomFlatYTmp","topFlatY","topFlatYTmp","nextY","updatePreviewCube","aim","distance","face","normal","button","removeCube","newPosition","rotate","targetIsHalfCube","DefaultCube","targetIsFlower1Cube","newIsFlower1Cube","Object","keys","newIsHalfCube","newIsStairsCube","newPositionVector","applyAxisAngle","round","yMove","existObject","checkObject","Objects","checkPositionIsExistBlock","newDirectionRotate","newDirection","worldDirection","getWorldDirection","cube","buildCube","add","wheelDelta","changeCurrentCubeTypeIndex","detail","onmousewheel","isNext","plusValue","result","previewCube","geometryMap","previewCubeType","geometry","previewGeometry","getCurrentCubeTypeIndex","scale","material","previewCubeRotation","index","findIndex","splice","remove","getObjectById","aimEl","transform","fontSize","fontWeight","textAlign","verticalAlign","lineHeight","fontFamily","backgroundColor","type","divEl","spanEl1","innerText","spanEl2","spanEl3","spanEl4","isWebGLAvailable","getWebGLErrorMessage","lightDirectional","canvasEL","backgroundType","textureCube","background","cubeShader","uniforms","value","fragmentShader","vertexShader","cubeWithPic","initScene","lightAmbient","light","setHex","intensity","initAmbientLight","shadow","radius","initDirectionalLight","fov","near","far","initCamera","aspect","offsetWidth","offsetHeight","updateProjectionMatrix","renderer","shadowMap","enabled","setClearColor","initRenderer","setSize","setPixelRatio","devicePixelRatio","controlsType","showOrbitControl","initClickFunction","children","initControls","lightOption","current","low","high","becomeHigher","cubeFactory","testBlock","mountainHeight","zValue","xValue","yValue","cubeType","values","idHalfCube","cubeInfo","prevTime","animate","requestAnimationFrame","time","update","render","changeLight","onresize","onload","audioBGM","currentIndex","arr","Audio","preload","autoplay","hidden","right","loop","src","play","playHandler","removeEventListener","initBGMPlayer"],"mappings":"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","file":"package/index.17ab34bddfc30651b9b0.bundle.js","sourcesContent":["export default {\r\n    enableShadow:false\r\n}","export default {\r\n    Cube: 'cube',\r\n    HalfCube: 'halfCube',\r\n    StairsCube: 'stairsCube',\r\n    Flower1Cube: 'flower1Cube'\r\n}","import * as THREE from \"three\";\r\n\r\nexport default[//切图位置\r\n    [\r\n        new THREE.Vector2(0, 0),\r\n        new THREE.Vector2(0.5, 0),\r\n        new THREE.Vector2(1, 0),\r\n    ],\r\n    [\r\n        new THREE.Vector2(0, 0.5),\r\n        new THREE.Vector2(0.5, 0.5),\r\n        new THREE.Vector2(1, 0.5),\r\n    ],\r\n    [\r\n        new THREE.Vector2(0, 1),\r\n        new THREE.Vector2(0.5, 1),\r\n        new THREE.Vector2(1, 1),\r\n    ]\r\n]","import * as THREE from 'three';\r\nimport GlobalSetting from \"../../setting/GlobalSetting\";\r\nimport GeometryType from \"./GeometryType\";\r\nimport ImagePoint from \"./ImagePoint\";\r\nimport {MeshLambertMaterial} from \"three\";\r\nimport {MeshBasicMaterial} from \"three\";\r\n\r\n\r\nexport default class CubeFactory {\r\n    constructor(defaultCube) {\r\n        if (CubeFactory._instanceObj && CubeFactory._instanceObj[defaultCube.key]) {\r\n            return CubeFactory._instanceObj[defaultCube.key];\r\n        }\r\n        this.cubeOptions = defaultCube;\r\n        this._materials = [];\r\n        this._materialsMap = {};\r\n        this._materialsHalfMap = {};\r\n        this._geometry = undefined;\r\n        this._geometryMap = {};\r\n        this._cubeSize = 1;//方块边长，只能为1\r\n        this.buildMaterials();\r\n        this.buildGeometry();\r\n        CubeFactory._instanceObj = {\r\n            [defaultCube.key]: this\r\n        }\r\n    }\r\n\r\n    //初始化形状\r\n    buildGeometry() {\r\n        if (this._geometryMap) {\r\n            this._geometry = this._geometryMap[this.cubeOptions.cubeAttributes.geometryType];\r\n        }\r\n        if (this._geometry) {\r\n            return;\r\n        }\r\n\r\n        let geometryType = undefined;\r\n        if (this.cubeOptions.cubeAttributes !== undefined && this.cubeOptions.cubeAttributes.geometryType !== undefined) {\r\n            geometryType = this.cubeOptions.cubeAttributes.geometryType;\r\n        }\r\n        let geom;\r\n        const imagePoint = ImagePoint;\r\n        const width = this._cubeSize;\r\n        const innerWidth = width / Math.sqrt(2);\r\n        switch (geometryType) {\r\n            case GeometryType.Cube:\r\n                geom = new THREE.CubeGeometry(this._cubeSize, this._cubeSize, this._cubeSize);\r\n                break;\r\n            case GeometryType.HalfCube:\r\n                geom = new THREE.CubeGeometry(this._cubeSize, this._cubeSize / 2, this._cubeSize);\r\n                break;\r\n            case GeometryType.StairsCube:\r\n                geom = new THREE.Geometry();\r\n                geom.vertices = [//顶点\r\n                    new THREE.Vector3(width / 2, -width / 2, width / 2),\r\n                    new THREE.Vector3(width / 2, -width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, -width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, -width / 2, width / 2),\r\n\r\n                    new THREE.Vector3(width / 2, 0, width / 2),\r\n                    new THREE.Vector3(width / 2, 0, -width / 2),\r\n                    new THREE.Vector3(0, 0, -width / 2),\r\n                    new THREE.Vector3(0, 0, width / 2),\r\n\r\n                    new THREE.Vector3(0, width / 2, width / 2),\r\n                    new THREE.Vector3(0, width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, width / 2, width / 2),\r\n                ];\r\n                geom.faces = [\r\n                    //底面\r\n                    new THREE.Face3(0, 2, 1),\r\n                    new THREE.Face3(0, 3, 2),\r\n                    //前面下半\r\n                    new THREE.Face3(0, 1, 5),\r\n                    new THREE.Face3(0, 5, 4),\r\n                    //前面上半\r\n                    new THREE.Face3(7, 6, 9),\r\n                    new THREE.Face3(7, 9, 8),\r\n                    //上面前半\r\n                    new THREE.Face3(4, 5, 6),\r\n                    new THREE.Face3(4, 6, 7),\r\n                    //上面后半\r\n                    new THREE.Face3(8, 9, 10),\r\n                    new THREE.Face3(8, 10, 11),\r\n                    //后面\r\n                    new THREE.Face3(2, 3, 11),\r\n                    new THREE.Face3(2, 11, 10),\r\n                    //左\r\n                    new THREE.Face3(7, 8, 11),\r\n                    new THREE.Face3(7, 11, 3),\r\n                    new THREE.Face3(7, 3, 0),\r\n                    new THREE.Face3(7, 0, 4),\r\n                    //右\r\n                    new THREE.Face3(6, 10, 9),\r\n                    new THREE.Face3(6, 2, 10),\r\n                    new THREE.Face3(6, 1, 2),\r\n                    new THREE.Face3(6, 5, 1),\r\n                ];\r\n                //底面\r\n                geom.faceVertexUvs[0][0] = ([imagePoint[0][0], imagePoint[2][2], imagePoint[0][2]]);\r\n                geom.faceVertexUvs[0][1] = ([imagePoint[0][0], imagePoint[2][0], imagePoint[2][2]]);\r\n                //前面下半\r\n                geom.faceVertexUvs[0][2] = ([imagePoint[0][0], imagePoint[0][2], imagePoint[1][2]]);\r\n                geom.faceVertexUvs[0][3] = ([imagePoint[0][0], imagePoint[1][2], imagePoint[1][0]]);\r\n                //前面上半\r\n                geom.faceVertexUvs[0][4] = geom.faceVertexUvs[0][2];\r\n                geom.faceVertexUvs[0][5] = geom.faceVertexUvs[0][3];\r\n                //上面前半\r\n                geom.faceVertexUvs[0][6] = geom.faceVertexUvs[0][2];\r\n                geom.faceVertexUvs[0][7] = geom.faceVertexUvs[0][3];\r\n                //上面后半\r\n                geom.faceVertexUvs[0][8] = geom.faceVertexUvs[0][2];\r\n                geom.faceVertexUvs[0][9] = geom.faceVertexUvs[0][3];\r\n                //后面\r\n                geom.faceVertexUvs[0][10] = ([imagePoint[0][0], imagePoint[0][2], imagePoint[2][2]]);\r\n                geom.faceVertexUvs[0][11] = ([imagePoint[0][0], imagePoint[2][2], imagePoint[2][0]]);\r\n                //左\r\n                geom.faceVertexUvs[0][12] = ([imagePoint[1][1], imagePoint[2][1], imagePoint[2][0]]);\r\n                geom.faceVertexUvs[0][13] = ([imagePoint[1][1], imagePoint[2][0], imagePoint[0][0]]);\r\n                geom.faceVertexUvs[0][14] = ([imagePoint[1][1], imagePoint[0][0], imagePoint[0][2]]);\r\n                geom.faceVertexUvs[0][15] = ([imagePoint[1][1], imagePoint[0][2], imagePoint[1][2]]);\r\n                //右\r\n                geom.faceVertexUvs[0][16] = ([imagePoint[1][1], imagePoint[2][0], imagePoint[2][1]]);\r\n                geom.faceVertexUvs[0][17] = ([imagePoint[1][1], imagePoint[0][0], imagePoint[2][0]]);\r\n                geom.faceVertexUvs[0][18] = ([imagePoint[1][1], imagePoint[0][2], imagePoint[0][0]]);\r\n                geom.faceVertexUvs[0][19] = ([imagePoint[1][1], imagePoint[1][2], imagePoint[0][2]]);\r\n                geom.computeFaceNormals();//计算面的法向量。可以在点击时判断出face的法向量。不使用此方法，则点击时获得的face法向量xyz均为0,。\r\n                this._geometry = geom;\r\n                break;\r\n            case GeometryType.Flower1Cube:\r\n                geom = new THREE.Geometry();\r\n                geom.vertices = [//顶点\r\n                    new THREE.Vector3(innerWidth / 2, -width / 2, innerWidth / 2),\r\n                    new THREE.Vector3(innerWidth / 2, -width / 2, -innerWidth / 2),\r\n                    new THREE.Vector3(-innerWidth / 2, -width / 2, -innerWidth / 2),\r\n                    new THREE.Vector3(-innerWidth / 2, -width / 2, innerWidth / 2),\r\n\r\n                    new THREE.Vector3(innerWidth / 2, width / 2, innerWidth / 2),\r\n                    new THREE.Vector3(innerWidth / 2, width / 2, -innerWidth / 2),\r\n                    new THREE.Vector3(-innerWidth / 2, width / 2, -innerWidth / 2),\r\n                    new THREE.Vector3(-innerWidth / 2, width / 2, innerWidth / 2),\r\n\r\n                    new THREE.Vector3(width / 2, -width / 2, width / 2),\r\n                    new THREE.Vector3(width / 2, -width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, -width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, -width / 2, width / 2),\r\n\r\n                    new THREE.Vector3(width / 2, width / 2, width / 2),\r\n                    new THREE.Vector3(width / 2, width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, width / 2, -width / 2),\r\n                    new THREE.Vector3(-width / 2, width / 2, width / 2),\r\n\r\n                ];\r\n                geom.faces = [\r\n                    //内部交叉面\r\n                    new THREE.Face3(0, 2, 6),\r\n                    new THREE.Face3(0, 6, 4),\r\n                    new THREE.Face3(3, 1, 5),\r\n                    new THREE.Face3(3, 5, 7),\r\n                    //外部方块面\r\n                    new THREE.Face3(8, 11, 10),\r\n                    new THREE.Face3(8, 10, 9),\r\n                    new THREE.Face3(8, 15, 11),\r\n                    new THREE.Face3(8, 12, 15),\r\n                    new THREE.Face3(8, 9, 13),\r\n                    new THREE.Face3(8, 13, 12),\r\n                    new THREE.Face3(14, 12, 13),\r\n                    new THREE.Face3(14, 15, 12),\r\n                    new THREE.Face3(14, 13, 9),\r\n                    new THREE.Face3(14, 9, 10),\r\n                    new THREE.Face3(14, 11, 15),\r\n                    new THREE.Face3(14, 10, 11),\r\n                ];\r\n\r\n                for (let faceIndex in geom.faces) {\r\n                    if (faceIndex < 4) {\r\n                        geom.faces [faceIndex].materialIndex = 0;\r\n                    } else {\r\n                        geom.faces [faceIndex].materialIndex = 1;\r\n                    }\r\n                }\r\n                geom.faceVertexUvs[0][0] = [imagePoint[0][0], imagePoint[0][2], imagePoint[2][2]];\r\n                geom.faceVertexUvs[0][1] = [imagePoint[0][0], imagePoint[2][2], imagePoint[2][0]];\r\n                geom.faceVertexUvs[0][2] = geom.faceVertexUvs[0][0];\r\n                geom.faceVertexUvs[0][3] = geom.faceVertexUvs[0][1];\r\n                for (let i = 4; i < 16; i++) {\r\n                    geom.faceVertexUvs[0][i] = [new THREE.Vector2(), new THREE.Vector2(),  new THREE.Vector2() ]\r\n                }\r\n                geom.computeFaceNormals();\r\n                break;\r\n            default:\r\n                throw \"unknow geometryType\";\r\n        }\r\n        this._geometry = geom;\r\n        this._geometryMap[this.cubeOptions.cubeAttributes.geometryType] = this._geometry\r\n    }\r\n\r\n    //初始化材质\r\n    buildMaterials() {\r\n        if (this._materialsMap) {\r\n            this._materials = this._materialsMap[this.cubeOptions.key];\r\n        }\r\n        if (this._materials && this._materials.length !== 0) {\r\n            return;\r\n        }\r\n        this._materials = [];\r\n        let textureLoader = new THREE.TextureLoader();\r\n        let textureList = [];\r\n        for (let imageUrlIndex in this.cubeOptions.images) {\r\n            let imageUrl = this.cubeOptions.images[imageUrlIndex];\r\n            if (imageUrl === '' || imageUrl === undefined) {\r\n                textureList.push(undefined);\r\n            } else {\r\n                let texture = textureLoader.load(imageUrl);\r\n                texture.generateMipmaps = true;//生成纹理，用于相关滤镜，根据远近自动调整贴图质量\r\n                texture.minFilter = THREE.NearestMipMapNearestFilter;//minFilter属性：指定纹理如何缩小。默认值：THREE.LinearMipMapLinearFilter。\r\n                texture.magFilter = THREE.NearestFilter;//magFilter属性：指定纹理如何放大。THREE.NearestFilter 贴图像素化\r\n                textureList.push(texture);\r\n            }\r\n        }\r\n        let materialList = [];\r\n        for (let textureIndex in textureList) {\r\n            let texture = textureList[textureIndex];\r\n\r\n            materialList.push(\r\n                new THREE.MeshLambertMaterial({\r\n                    // color:0x4F9C1A,\r\n                    // side: THREE.DoubleSide,\r\n                    map: texture,\r\n                    // vertexColors: THREE.VertexColors,\r\n                    fog: true,//当前材质是否受到全局雾化效果器影响\r\n                    ...(this.cubeOptions.materialParameters ? this.cubeOptions.materialParameters : {}),\r\n                    ...(this.cubeOptions.materialParametersForOneList && this.cubeOptions.materialParametersForOneList[textureIndex] ? this.cubeOptions.materialParametersForOneList[textureIndex] : {}),\r\n                })\r\n            );\r\n        }\r\n        //半高贴图\r\n        let geometryType = (this.cubeOptions.cubeAttributes !== undefined) && this.cubeOptions.cubeAttributes.geometryType;\r\n\r\n        for (let keyIndex in this.cubeOptions.imageSet) {\r\n            let key = this.cubeOptions.imageSet[keyIndex];\r\n            let materialTmp = materialList[key];\r\n            switch (geometryType) {\r\n                case GeometryType.HalfCube:\r\n                    if (\"0145\".indexOf(keyIndex) >= 0) {\r\n                        if (!this._materialsHalfMap) {\r\n                            this._materialsHalfMap = {}\r\n                        }\r\n                        if (this._materialsHalfMap[this.cubeOptions.key]) {\r\n                            materialTmp = this._materialsHalfMap[this.cubeOptions.key];\r\n                        } else if (materialTmp.map) {\r\n                            let materialNew = materialTmp.clone();\r\n                            materialNew.map = materialTmp.map.clone();\r\n                            let textureNew = textureLoader.load(this.cubeOptions.images[this.cubeOptions.imageSet[keyIndex]]);\r\n                            textureNew.generateMipmaps = true;\r\n                            textureNew.minFilter = THREE.NearestMipMapNearestFilter;\r\n                            textureNew.magFilter = THREE.NearestFilter;\r\n                            textureNew.wrapS = textureNew.wrapT = THREE.RepeatWrapping;\r\n                            textureNew.repeat.set(1, 0.5);\r\n                            materialNew.map = textureNew;\r\n                            materialTmp = materialNew;\r\n                            this._materialsHalfMap[this.cubeOptions.key] = materialTmp;\r\n                        }\r\n                    }\r\n                    break;\r\n                case GeometryType.Flower1Cube:\r\n                    if (Number(keyIndex) === 0) {\r\n                        materialTmp.transparent = true;\r\n                        // materialTmp.depthTest=false;//穿所有平面，一直可见\r\n                        materialTmp.depthWrite = false;//交叉平面透明部分不互相遮挡\r\n                        materialTmp.side = THREE.DoubleSide;\r\n                    } else {\r\n                        materialTmp.transparent = true;\r\n                        materialTmp.opacity = 0;\r\n                    }\r\n                    break;\r\n            }\r\n            this._materials.push(materialTmp);\r\n        }\r\n        if (geometryType === GeometryType.Flower1Cube) {\r\n            if (this._materials.length <= 1) {\r\n                this._materials.push(new MeshBasicMaterial({\r\n                    transparent: true,\r\n                    opacity: 0,\r\n                }));\r\n            }\r\n        }\r\n        this._materialsMap[this.cubeOptions.key] = this._materials;\r\n    };\r\n\r\n\r\n    //构造方块\r\n    buildCube(x, y, z, defaultCube, rotateX, rotateY, rotateZ) {\r\n        let position = {x: x, y: y, z: z};\r\n        let rotation = {rotateX: rotateX, rotateY: rotateY, rotateZ: rotateZ};\r\n        if (defaultCube) {\r\n            this.cubeOptions = defaultCube;\r\n            this.buildGeometry();\r\n            this.buildMaterials();\r\n        }\r\n        position.x = position.x || 0;\r\n        position.y = position.y || 0;\r\n        position.z = position.z || 0;\r\n        let mesh = new THREE.Mesh(\r\n            this._geometry,\r\n            this._materials\r\n        );\r\n        mesh.receiveShadow = mesh.castShadow = GlobalSetting.enableShadow;\r\n        //新方块中心位置\r\n        {\r\n            mesh.position.x = position.x;\r\n            mesh.position.y = position.y;\r\n            mesh.position.z = position.z;\r\n            mesh.userData = {\r\n                fullCubePosition: {\r\n                    x: mesh.position.x,\r\n                    y: mesh.position.y,\r\n                    z: mesh.position.z,\r\n                },\r\n                cubeTypeKey: this.cubeOptions.key,\r\n                cubeAttributes: this.cubeOptions.cubeAttributes\r\n            };\r\n        }\r\n        if (rotation.rotateX && (defaultCube.meshParameters && defaultCube.meshParameters.rotateEnable && defaultCube.meshParameters.rotateEnable.x)) {\r\n            mesh.rotateX(rotation.rotateX * Math.PI / 180);\r\n        }\r\n        if (rotation.rotateY && (defaultCube.meshParameters && defaultCube.meshParameters.rotateEnable && defaultCube.meshParameters.rotateEnable.y)) {\r\n            mesh.rotateY(rotation.rotateY * Math.PI / 180);\r\n        }\r\n        if (rotation.rotateZ && (defaultCube.meshParameters && defaultCube.meshParameters.rotateEnable && defaultCube.meshParameters.rotateEnable.z)) {\r\n            mesh.rotateZ(rotation.rotateZ * Math.PI / 180);\r\n        }\r\n        mesh.name = this.cubeOptions.key + \"(\" + position.x + \",\" + position.y + \",\" + position.z + \")\";\r\n        return mesh;\r\n    }\r\n}","// 查看信息小控件\r\nimport Stats from \"stats-js\";\r\nexport default class StatsWindow {\r\n    constructor(canvasElId) {\r\n        if (StatsWindow._instance) {\r\n            return StatsWindow._instance;\r\n        }\r\n        let stats;\r\n        stats = new Stats();\r\n        stats.domElement.style.position = 'absolute';\r\n        stats.domElement.style.left = '0px';\r\n        stats.domElement.style.top = '0px';\r\n        document.getElementById(canvasElId).appendChild(stats.domElement);\r\n        StatsWindow._instance = this;\r\n        this.stats=stats;\r\n        return this;\r\n    }\r\n}\r\n\r\n","import * as THREE from \"three\";\r\nimport GlobalSetting from \"../setting/GlobalSetting\";\r\n\r\nexport const lightHighIntensity = 1;\r\nexport const lightLowIntensity = 0.3;\r\nexport const lightCurrentIntensity = 1;\r\nexport const lightValueBecomeHigher = true;\r\n\r\nexport function initAmbientLight() {\r\n    let light = new THREE.AmbientLight();//环境光\r\n    light.castShadow = false;\r\n    light.color = new THREE.Color().setHex(0xffffff);\r\n    light.intensity = getAmbientLightIntensity();\r\n    return light;\r\n}\r\n\r\nexport function getAmbientLightIntensity(lightCurrentIntensity, lightHighIntensity, lightLowIntensity) {\r\n    return Math.min(Math.max(lightLowIntensity, lightCurrentIntensity), lightHighIntensity);\r\n}\r\n\r\nexport function initDirectionalLight() {\r\n    let light = new THREE.DirectionalLight();//环境光\r\n    light.castShadow = GlobalSetting.enableShadow;\r\n    light.color = new THREE.Color().setHex(0xffffff);\r\n    light.intensity = getDirectionalLightIntensity();\r\n    light.shadow.radius = 512;\r\n    light.position.x = 10;\r\n    light.position.y = -10;\r\n    light.position.z = 10;\r\n    return light;\r\n}\r\n\r\nexport function getDirectionalLightIntensity(lightCurrentIntensity, lightHighIntensity, lightLowIntensity) {\r\n    return Math.min(Math.max(lightLowIntensity, lightCurrentIntensity), lightHighIntensity) / 4;\r\n}\r\n","import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\nimport * as THREE from 'three';\r\nexport default class ShowOrbitControl {\r\n\r\n    constructor(camera, domElement) {\r\n        // ShowOrbitControl._instance;\r\n        // this.controls;\r\n        this.camera = camera;\r\n        if (ShowOrbitControl._instance) {\r\n            return ShowOrbitControl._instance;\r\n        }\r\n        this.controls = new OrbitControls(camera, domElement);\r\n        //动态阻尼系数 就是鼠标拖拽旋转灵敏度\r\n        this.controls.dampingFactor = 1;\r\n        //是否允许平移\r\n        this.controls.enablePan = false;\r\n        ShowOrbitControl._instance = this;\r\n        return ShowOrbitControl._instance;\r\n    }\r\n\r\n    initClickFunction(objects, camera) {\r\n        window.addEventListener('mousedown', (event) => {\r\n            let clickedObjects = getClickedObject(event, objects, this.camera);\r\n            if (clickedObjects.length > 0) {\r\n                let obj = clickedObjects[0].object;\r\n                console.log(\"点击的对象：\" + obj.name);\r\n            }\r\n        }, false);\r\n    }\r\n}\r\n\r\n//获取点击的对象\r\nfunction getClickedObject(event, objects, camera) {\r\n    let raycaster = new THREE.Raycaster();\r\n    let mouse = new THREE.Vector2();\r\n    //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n    // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n    raycaster.setFromCamera(mouse, camera);\r\n    // 获取raycaster直线和所有模型相交的数组集合\r\n    return raycaster.intersectObjects(objects);\r\n}\r\n\r\n\r\n","//预设方块信息\r\nimport GeometryType from \"./GeometryType\";\r\n\r\nexport default {\r\n    grass: {\r\n        key: 'grass',//设置和对象key一样\r\n        images: [//贴图路径\r\n            './assets/img/blocks/grass_side.png',\r\n            './assets/img/blocks/grass_top.png',\r\n            './assets/img/blocks/dirt.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],//六面贴图使用的images图片下标\r\n        materialParameters: {},//THREE.MeshXxxMaterial 对象参数，六面都影响\r\n        materialParametersForOneList: [//THREE.MeshXxxMaterial 对象参数，只影响对应的一个面\r\n            {},\r\n            {color: 0xB1FB6C},\r\n        ],\r\n        meshParameters: {\r\n            rotateEnable: {//放置方块时，旋转辅助参数，是否可在对应轴上旋转\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,//不能碰撞。false-能踩能撞\r\n            isIndestructible: false,//不能销毁。false-左键点击能消除\r\n            geometryType: GeometryType.Cube,//是半砖。cube-砖。halfCube-半砖，可以在一个1x1x1内叠加另一个半砖\r\n        },\r\n    },\r\n    test: {\r\n        key: 'test',\r\n        images: [\r\n            './assets/img/1.png',\r\n            './assets/img/2.png',\r\n            './assets/img/3.png',\r\n            './assets/img/4.png',\r\n            './assets/img/5.png',\r\n            './assets/img/6.png',\r\n        ],\r\n        imageSet: [0, 1, 2, 3, 4, 5],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    dirt: {\r\n        key: 'dirt',\r\n        images: [\r\n            './assets/img/blocks/dirt.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    dirt_podzol: {\r\n        key: 'dirt_podzol',\r\n        images: [\r\n            './assets/img/blocks/dirt_podzol_side.png',\r\n            './assets/img/blocks/dirt_podzol_top.png',\r\n            './assets/img/blocks/dirt.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    diamond_block: {\r\n        key: 'diamond_block',\r\n        images: [\r\n            './assets/img/blocks/diamond_block.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    // Cloud: {\r\n    //     key: 'Cloud',\r\n    //     images: [\r\n    //         './assets/img/blocks/grass_side.png',\r\n    //         './assets/img/blocks/grass_top_green.png',\r\n    //         './assets/img/blocks/dirt.png',\r\n    //     ],\r\n    //     imageSet: [0, 0, 1, 2, 0, 0],\r\n    //     materialParameters: {\r\n    //         transparent: true,//透明\r\n    //         opacity: 0.2,//透明度\r\n    //     }\r\n    // },\r\n    cobblestone: {\r\n        key: 'cobblestone',\r\n        images: [\r\n            './assets/img/blocks/cobblestone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    cobblestone_mossy: {\r\n        key: 'cobblestone_mossy',\r\n        images: [\r\n            './assets/img/blocks/cobblestone_mossy.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    stone: {\r\n        key: 'stone',\r\n        images: [\r\n            './assets/img/blocks/stone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    stone_slab: {\r\n        key: 'stone_slab',\r\n        images: [\r\n            './assets/img/blocks/stone_slab_side.png',\r\n            './assets/img/blocks/stone_slab_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    stonebrick: {\r\n        key: 'stonebrick',\r\n        images: [\r\n            './assets/img/blocks/stonebrick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    stonebrick_carved: {\r\n        key: 'stonebrick_carved',\r\n        images: [\r\n            './assets/img/blocks/stonebrick_carved.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    stonebrick_cracked: {\r\n        key: 'stonebrick_cracked',\r\n        images: [\r\n            './assets/img/blocks/stonebrick_cracked.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    stonebrick_mossy: {\r\n        key: 'stonebrick_mossy',\r\n        images: [\r\n            './assets/img/blocks/stonebrick_mossy.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n\r\n\r\n    brick: {\r\n        key: 'brick',\r\n        images: [\r\n            './assets/img/blocks/brick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    planks_birch: {\r\n        key: 'planks_birch',\r\n        images: [\r\n            './assets/img/blocks/planks_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    planks_acacia: {\r\n        key: 'planks_acacia',\r\n        images: [\r\n            './assets/img/blocks/planks_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    planks_jungle: {\r\n        key: 'planks_jungle',\r\n        images: [\r\n            './assets/img/blocks/planks_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    planks_oak: {\r\n        key: 'planks_oak',\r\n        images: [\r\n            './assets/img/blocks/planks_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    planks_spruce: {\r\n        key: 'planks_spruce',\r\n        images: [\r\n            './assets/img/blocks/planks_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    // reeds: {\r\n    //     key: 'reeds',\r\n    //     images: [\r\n    //         './assets/img/blocks/reeds.png',\r\n    //     ],\r\n    //     imageSet: [0, 0, 0, 0, 0, 0],\r\n    //     materialParameters: {\r\n    //         transparent: true,\r\n    //         side: THREE.DoubleSide,\r\n    //     },\r\n    //     materialParametersForOneList:[]\r\n    // },\r\n\r\n    log_acacia: {\r\n        key: 'log_acacia',\r\n        images: [\r\n            './assets/img/blocks/log_acacia.png',\r\n            './assets/img/blocks/log_acacia_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_acacia: {\r\n        key: 'leaves_acacia',\r\n        images: [\r\n            './assets/img/blocks/leaves_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_acacia_opaque: {\r\n        key: 'leaves_acacia_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_acacia_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n\r\n    log_birch: {\r\n        key: 'log_birch',\r\n        images: [\r\n            './assets/img/blocks/log_birch.png',\r\n            './assets/img/blocks/log_birch_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_birch: {\r\n        key: 'leaves_birch',\r\n        images: [\r\n            './assets/img/blocks/leaves_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_birch_opaque: {\r\n        key: 'leaves_birch_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_birch_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n\r\n    log_jungle: {\r\n        key: 'log_jungle',\r\n        images: [\r\n            './assets/img/blocks/log_jungle.png',\r\n            './assets/img/blocks/log_jungle_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_jungle: {\r\n        key: 'leaves_jungle',\r\n        images: [\r\n            './assets/img/blocks/leaves_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_jungle_opaque: {\r\n        key: 'leaves_jungle_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_jungle_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n\r\n    log_oak: {\r\n        key: 'log_oak',\r\n        images: [\r\n            './assets/img/blocks/log_oak.png',\r\n            './assets/img/blocks/log_oak_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_oak: {\r\n        key: 'leaves_oak',\r\n        images: [\r\n            './assets/img/blocks/leaves_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_oak_opaque: {\r\n        key: 'leaves_oak_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_oak_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n\r\n    log_spruce: {\r\n        key: 'log_spruce',\r\n        images: [\r\n            './assets/img/blocks/log_spruce.png',\r\n            './assets/img/blocks/log_spruce_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_spruce: {\r\n        key: 'leaves_spruce',\r\n        images: [\r\n            './assets/img/blocks/leaves_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    leaves_spruce_opaque: {\r\n        key: 'leaves_spruce_opaque',\r\n        images: [\r\n            './assets/img/blocks/leaves_spruce_opaque.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0x89B95C,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass: {\r\n        key: 'glass',\r\n        images: [\r\n            './assets/img/blocks/glass.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_black: {\r\n        key: 'glass_black',\r\n        images: [\r\n            './assets/img/blocks/glass_black.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_blue: {\r\n        key: 'glass_blue',\r\n        images: [\r\n            './assets/img/blocks/glass_blue.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_brown: {\r\n        key: 'glass_brown',\r\n        images: [\r\n            './assets/img/blocks/glass_brown.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_cyan: {\r\n        key: 'glass_cyan',\r\n        images: [\r\n            './assets/img/blocks/glass_cyan.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_gray: {\r\n        key: 'glass_gray',\r\n        images: [\r\n            './assets/img/blocks/glass_gray.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_green: {\r\n        key: 'glass_green',\r\n        images: [\r\n            './assets/img/blocks/glass_green.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_light_blue: {\r\n        key: 'glass_light_blue',\r\n        images: [\r\n            './assets/img/blocks/glass_light_blue.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_lime: {\r\n        key: 'glass_lime',\r\n        images: [\r\n            './assets/img/blocks/glass_lime.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_magenta: {\r\n        key: 'glass_magenta',\r\n        images: [\r\n            './assets/img/blocks/glass_magenta.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_orange: {\r\n        key: 'glass_orange',\r\n        images: [\r\n            './assets/img/blocks/glass_orange.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_pink: {\r\n        key: 'glass_pink',\r\n        images: [\r\n            './assets/img/blocks/glass_pink.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_purple: {\r\n        key: 'glass_purple',\r\n        images: [\r\n            './assets/img/blocks/glass_purple.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_red: {\r\n        key: 'glass_red',\r\n        images: [\r\n            './assets/img/blocks/glass_red.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_silver: {\r\n        key: 'glass_silver',\r\n        images: [\r\n            './assets/img/blocks/glass_silver.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_white: {\r\n        key: 'glass_white',\r\n        images: [\r\n            './assets/img/blocks/glass_white.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glass_yellow: {\r\n        key: 'glass_yellow',\r\n        images: [\r\n            './assets/img/blocks/glass_yellow.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    glowstone: {\r\n        key: 'glowstone',\r\n        images: [\r\n            './assets/img/blocks/glowstone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    gold_block: {\r\n        key: 'gold_block',\r\n        images: [\r\n            './assets/img/blocks/gold_block.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    gold_ore: {\r\n        key: 'gold_ore',\r\n        images: [\r\n            './assets/img/blocks/gold_ore.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    clay: {\r\n        key: 'clay',\r\n        images: [\r\n            './assets/img/blocks/clay.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay: {\r\n        key: 'hardened_clay',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_black: {\r\n        key: 'hardened_clay_stained_black',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_black.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_blue: {\r\n        key: 'hardened_clay_stained_blue',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_blue.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_brown: {\r\n        key: 'hardened_clay_stained_brown',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_brown.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_cyan: {\r\n        key: 'hardened_clay_stained_cyan',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_cyan.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_gray: {\r\n        key: 'hardened_clay_stained_gray',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_gray.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_green: {\r\n        key: 'hardened_clay_stained_green',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_green.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_light_blue: {\r\n        key: 'hardened_clay_stained_light_blue',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_light_blue.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_lime: {\r\n        key: 'hardened_clay_stained_lime',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_lime.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_magenta: {\r\n        key: 'hardened_clay_stained_magenta',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_magenta.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_orange: {\r\n        key: 'hardened_clay_stained_orange',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_orange.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_pink: {\r\n        key: 'hardened_clay_stained_pink',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_pink.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_purple: {\r\n        key: 'hardened_clay_stained_purple',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_purple.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_red: {\r\n        key: 'hardened_clay_stained_red',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_red.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_silver: {\r\n        key: 'hardened_clay_stained_silver',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_silver.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_white: {\r\n        key: 'hardened_clay_stained_white',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_white.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    hardened_clay_stained_yellow: {\r\n        key: 'hardened_clay_stained_yellow',\r\n        images: [\r\n            './assets/img/blocks/hardened_clay_stained_yellow.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            transparent: true,\r\n        },\r\n        materialParametersForOneList: [],\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    // ice: {\r\n    //     key: 'ice',\r\n    //     images: [\r\n    //         './assets/img/blocks/ice.png',\r\n    //     ],\r\n    //     imageSet: [0, 0, 0, 0, 0, 0],\r\n    //     materialParameters: {\r\n    //         transparent:true\r\n    //     },\r\n    //     materialParametersForOneList: [\r\n    //     ],\r\n    //     meshParameters: {\r\n    //         rotateEnable: {\r\n    //             x: false,\r\n    //             y: false,\r\n    //             z: false,\r\n    //         }\r\n    //     },\r\n    // },\r\n    melon: {\r\n        key: 'melon',\r\n        images: [\r\n            './assets/img/blocks/melon_side.png',\r\n            './assets/img/blocks/melon_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    pumpkin_face_off: {\r\n        key: 'pumpkin_face_off',\r\n        images: [\r\n            './assets/img/blocks/pumpkin_face_off.png',\r\n            './assets/img/blocks/pumpkin_side.png',\r\n            './assets/img/blocks/pumpkin_top.png',\r\n        ],\r\n        imageSet: [0, 1, 2, 2, 1, 1],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    pumpkin_face_on: {\r\n        key: 'pumpkin_face_on',\r\n        images: [\r\n            './assets/img/blocks/pumpkin_face_on.png',\r\n            './assets/img/blocks/pumpkin_side.png',\r\n            './assets/img/blocks/pumpkin_top.png',\r\n        ],\r\n        imageSet: [0, 1, 2, 2, 1, 1],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    test_half: {\r\n        key: 'test_half',\r\n        images: [''],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {\r\n            color: 0xFFFFFF,\r\n            transparent: true,//透明\r\n            opacity: 0.8,//透明度\r\n        },\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    stone_slab_half: {\r\n        key: 'stone_slab_half',\r\n        images: [\r\n            './assets/img/blocks/stone_slab_side.png',\r\n            './assets/img/blocks/stone_slab_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    brick_half: {\r\n        key: 'brick_half',\r\n        images: [\r\n            './assets/img/blocks/brick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    planks_birch_half: {\r\n        key: 'planks_birch_half',\r\n        images: [\r\n            './assets/img/blocks/planks_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    planks_acacia_half: {\r\n        key: 'planks_acacia_half',\r\n        images: [\r\n            './assets/img/blocks/planks_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    planks_jungle_half: {\r\n        key: 'planks_jungle_half',\r\n        images: [\r\n            './assets/img/blocks/planks_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    planks_oak_half: {\r\n        key: 'planks_oak_half',\r\n        images: [\r\n            './assets/img/blocks/planks_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    planks_spruce_half: {\r\n        key: 'planks_spruce_half',\r\n        images: [\r\n            './assets/img/blocks/planks_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.HalfCube,\r\n        },\r\n    },\r\n    cobblestone_stairs: {\r\n        key: 'cobblestone_stairs',\r\n        images: [\r\n            './assets/img/blocks/cobblestone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    cobblestone_mossy_stairs: {\r\n        key: 'cobblestone_mossy_stairs',\r\n        images: [\r\n            './assets/img/blocks/cobblestone_mossy.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    stone_stairs: {\r\n        key: 'stone_stairs',\r\n        images: [\r\n            './assets/img/blocks/stone.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    stone_slab_stairs: {\r\n        key: 'stone_slab_stairs',\r\n        images: [\r\n            './assets/img/blocks/stone_slab_side.png',\r\n            './assets/img/blocks/stone_slab_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    brick_stairs: {\r\n        key: 'brick_stairs',\r\n        images: [\r\n            './assets/img/blocks/brick.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    planks_birch_stairs: {\r\n        key: 'planks_birch_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_birch.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    planks_acacia_stairs: {\r\n        key: 'planks_acacia_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_acacia.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    planks_jungle_stairs: {\r\n        key: 'planks_jungle_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_jungle.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    planks_oak_stairs: {\r\n        key: 'planks_oak_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_oak.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    planks_spruce_stairs: {\r\n        key: 'planks_spruce_stairs',\r\n        images: [\r\n            './assets/img/blocks/planks_spruce.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.StairsCube,\r\n        },\r\n    },\r\n    hay_block: {\r\n        key: 'hay_block',\r\n        images: [\r\n            './assets/img/blocks/hay_block_side.png',\r\n            './assets/img/blocks/hay_block_top.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 1, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    sandstone_normal: {\r\n        key: 'sandstone_normal',\r\n        images: [\r\n            './assets/img/blocks/sandstone_normal.png',\r\n            './assets/img/blocks/sandstone_top.png',\r\n            './assets/img/blocks/sandstone_bottom.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    sandstone_smooth: {\r\n        key: 'sandstone_smooth',\r\n        images: [\r\n            './assets/img/blocks/sandstone_smooth.png',\r\n            './assets/img/blocks/sandstone_top.png',\r\n            './assets/img/blocks/sandstone_bottom.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    sandstone_carved: {\r\n        key: 'sandstone_carved',\r\n        images: [\r\n            './assets/img/blocks/sandstone_carved.png',\r\n            './assets/img/blocks/sandstone_top.png',\r\n            './assets/img/blocks/sandstone_bottom.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: true,\r\n                y: true,\r\n                z: true,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    tnt: {\r\n        key: 'tnt',\r\n        images: [\r\n            './assets/img/blocks/tnt_side.png',\r\n            './assets/img/blocks/tnt_top.png',\r\n            './assets/img/blocks/tnt_bottom.png',\r\n        ],\r\n        imageSet: [0, 0, 1, 2, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_white: {\r\n        key: 'wool_colored_white',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_white.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_black: {\r\n        key: 'wool_colored_black',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_black.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_blue: {\r\n        key: 'wool_colored_blue',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_blue.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_brown: {\r\n        key: 'wool_colored_brown',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_brown.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_cyan: {\r\n        key: 'wool_colored_cyan',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_cyan.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_gray: {\r\n        key: 'wool_colored_gray',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_gray.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_green: {\r\n        key: 'wool_colored_green',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_green.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_light_blue: {\r\n        key: 'wool_colored_light_blue',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_light_blue.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_lime: {\r\n        key: 'wool_colored_lime',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_lime.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_magenta: {\r\n        key: 'wool_colored_magenta',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_magenta.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_orange: {\r\n        key: 'wool_colored_orange',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_orange.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_pink: {\r\n        key: 'wool_colored_pink',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_pink.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_purple: {\r\n        key: 'wool_colored_purple',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_purple.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_red: {\r\n        key: 'wool_colored_red',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_red.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_silver: {\r\n        key: 'wool_colored_silver',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_silver.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    wool_colored_yellow: {\r\n        key: 'wool_colored_yellow',\r\n        images: [\r\n            './assets/img/blocks/wool_colored_yellow.png',\r\n        ],\r\n        imageSet: [0, 0, 0, 0, 0, 0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: false,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: false,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Cube,\r\n        },\r\n    },\r\n    flower_rose: {\r\n        key: 'flower_rose',\r\n        images: [\r\n            './assets/img/blocks/flower_rose.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_allium: {\r\n        key: 'flower_allium',\r\n        images: [\r\n            './assets/img/blocks/flower_allium.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_blue_orchid: {\r\n        key: 'flower_blue_orchid',\r\n        images: [\r\n            './assets/img/blocks/flower_blue_orchid.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_dandelion: {\r\n        key: 'flower_dandelion',\r\n        images: [\r\n            './assets/img/blocks/flower_dandelion.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_houstonia: {\r\n        key: 'flower_houstonia',\r\n        images: [\r\n            './assets/img/blocks/flower_houstonia.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_oxeye_daisy: {\r\n        key: 'flower_oxeye_daisy',\r\n        images: [\r\n            './assets/img/blocks/flower_oxeye_daisy.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_paeonia: {\r\n        key: 'flower_paeonia',\r\n        images: [\r\n            './assets/img/blocks/flower_paeonia.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_tulip_orange: {\r\n        key: 'flower_tulip_orange',\r\n        images: [\r\n            './assets/img/blocks/flower_tulip_orange.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_tulip_pink: {\r\n        key: 'flower_tulip_pink',\r\n        images: [\r\n            './assets/img/blocks/flower_tulip_pink.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_tulip_red: {\r\n        key: 'flower_tulip_red',\r\n        images: [\r\n            './assets/img/blocks/flower_tulip_red.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n    flower_tulip_white: {\r\n        key: 'flower_tulip_white',\r\n        images: [\r\n            './assets/img/blocks/flower_tulip_white.png',\r\n        ],\r\n        imageSet: [0],\r\n        materialParameters: {},\r\n        materialParametersForOneList: [],\r\n        meshParameters: {\r\n            rotateEnable: {\r\n                x: false,\r\n                y: true,\r\n                z: false,\r\n            }\r\n        },\r\n        cubeAttributes: {\r\n            isPenetrable: true,\r\n            isIndestructible: false,\r\n            geometryType: GeometryType.Flower1Cube,\r\n        },\r\n    },\r\n}","import {PointerLockControls} from 'three/examples/jsm/controls/PointerLockControls'\r\nimport CubeFactory from \"../objects/cube/CubeFactory\";\r\nimport * as THREE from 'three';\r\nimport DefaultCube from '../objects/cube/DefaultCube'\r\nimport {Vector3} from \"three\";\r\nimport GeometryType from \"../objects/cube/GeometryType\";\r\n\r\nexport default class MCFirstPersonControl {\r\n\r\n    constructor(camera, domElement, objects, scene) {\r\n        if (MCFirstPersonControl._instance) {\r\n            return MCFirstPersonControl._instance;\r\n        }\r\n        // MCFirstPersonControl._instance;\r\n        // this.controls;\r\n        // this.removeBlockTimer;//移除方块计时\r\n        // this.previewCube;//预览方块\r\n        this.camera = camera;\r\n        this.objects = objects;\r\n        this.scene = scene;\r\n        this.currentCubeTypeIndex = 0;\r\n\r\n        this.checkRay = {//0为负，1为正\r\n            X0: [],\r\n            X1: [],\r\n            Z0: [],\r\n            Z1: [],\r\n\r\n            Y0: [],\r\n            Y1: [],\r\n        };\r\n        this.moveForward = false;\r\n        this.moveBackward = false;\r\n        this.moveLeft = false;\r\n        this.moveRight = false;\r\n        this.preRuning = undefined;\r\n        this.isRunning = false;\r\n        this.canJump = false;\r\n        // this.prevTime = performance.now();\r\n        this.velocity = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.worldOption = {\r\n            g: 9.0\r\n        };\r\n        this.personOption = {\r\n            height: 1.8,//人物总高度。现有配置不能让人物高于2\r\n            sightHeight: 1.5,//眼部高度。现有配置不能让人物高于2\r\n            jumpHeight: 1.3,    //最大跳跃高度(并非砖块高度)\r\n            speedWalk: 5.7,     //最大行走速度\r\n            speedRun: 10,       //最大奔跑速度，连按w两次\r\n            accelerateRateStart: 0.3,//加速时加速比率。正数向前；负数反向；0不会加速；绝对值大于等于1可立即到最大速度\r\n            accelerateRateStop: 0.8,//停止时减速比率。范围[0-1]。0时立即停止，1时不会减速\r\n            thickness: 0.6,//人物的边长\r\n        };\r\n        this.init(camera, domElement);\r\n        MCFirstPersonControl._instance = this;\r\n        return MCFirstPersonControl._instance;\r\n    }\r\n\r\n    init(camera, domElement) {\r\n        this.controls = new PointerLockControls(camera, domElement);\r\n        //增加遮罩层\r\n        {\r\n            let blocker = document.createElement(\"div\");\r\n            blocker.style.position = \"absolute\";\r\n            blocker.style.zIndex = \"100\";\r\n            blocker.style.width = \"100%\";\r\n            blocker.style.height = \"100%\";\r\n            blocker.style.top = \"0\";\r\n            blocker.style.left = \"0\";\r\n            blocker.id = \"blocker\";\r\n            // blocker.style.backgroundColor = \"rgba(0, 0, 0, 0.4)\";\r\n            document.body.append(blocker);\r\n            blocker.addEventListener('click', () => {\r\n                this.controls.lock();\r\n            }, false);\r\n            this.controls.addEventListener('lock', function () {\r\n                blocker.style.display = 'none';\r\n            });\r\n            this.controls.addEventListener('unlock', function () {\r\n                blocker.style.display = 'block';\r\n            });\r\n        }\r\n        //添加准星\r\n        {\r\n            let aimX = document.createElement(\"div\");\r\n            aimX.style.height = \"2px\";\r\n            aimX.style.width = \"20px\";\r\n            setAimStyle(aimX);\r\n            document.body.append(aimX);\r\n            let aimY = document.createElement(\"div\");\r\n            aimY.style.height = \"20px\";\r\n            aimY.style.width = \"2px\";\r\n            setAimStyle(aimY);\r\n            document.body.append(aimY);\r\n        }\r\n        //加按键事件\r\n        let onKeyDown = (event) => {\r\n            switch (event.keyCode) {\r\n                case 38: // up\r\n                case 87: // w\r\n                    if (this.moveForward) {\r\n                        break;\r\n                    }\r\n                    if (!this.preRuning) {\r\n                        this.preRuning = performance.now();\r\n                    } else {\r\n                        this.isRunning = performance.now() - this.preRuning <= 200;\r\n                        this.preRuning = performance.now();\r\n                    }\r\n                    this.moveForward = true;\r\n                    break;\r\n\r\n                case 37: // left\r\n                case 65: // a\r\n                    if (this.moveLeft) {\r\n                        break;\r\n                    }\r\n                    this.moveLeft = true;\r\n                    break;\r\n\r\n                case 40: // down\r\n                case 83: // s\r\n                    if (this.moveBackward) {\r\n                        break;\r\n                    }\r\n                    this.moveBackward = true;\r\n                    break;\r\n\r\n                case 39: // right\r\n                case 68: // d\r\n                    if (this.moveRight) {\r\n                        break;\r\n                    }\r\n                    this.moveRight = true;\r\n                    break;\r\n\r\n                case 32: // space\r\n                    //7.74是60开平方\r\n                    if (this.canJump) this.velocity.y += Math.sqrt(2 * this.worldOption.g * 7.74 * this.personOption.jumpHeight);\r\n                    this.canJump = false;\r\n                    break;\r\n\r\n            }\r\n\r\n        };\r\n        let onKeyUp = (event) => {\r\n            switch (event.keyCode) {\r\n                case 38: // up\r\n                case 87: // w\r\n                    this.isRunning = false;\r\n                    this.moveForward = false;\r\n                    break;\r\n\r\n                case 37: // left\r\n                case 65: // a\r\n                    this.moveLeft = false;\r\n                    break;\r\n\r\n                case 40: // down\r\n                case 83: // s\r\n                    this.moveBackward = false;\r\n                    break;\r\n\r\n                case 39: // right\r\n                case 68: // d\r\n                    this.moveRight = false;\r\n                    break;\r\n\r\n            }\r\n\r\n        };\r\n        document.addEventListener('keydown', onKeyDown, false);\r\n        document.addEventListener('keyup', onKeyUp, false);\r\n        //初始化点击功能\r\n        this.initMouseFunction();\r\n        //加载预览方块\r\n        this.initPreviewCube();\r\n    }\r\n\r\n    update(delta) {\r\n        let objectsImpenetrable = this.objects.filter(e =>\r\n            !(e.userData\r\n                && e.userData.cubeAttributes\r\n                && e.userData.cubeAttributes.isPenetrable\r\n            )\r\n        );\r\n        // console.log(this.objects.length)\r\n        delta = delta || 0.016;\r\n        if (!this.controls.isLocked) {\r\n            this.moveForward = false;\r\n            this.moveBackward = false;\r\n            this.moveLeft = false;\r\n            this.moveRight = false;\r\n        }\r\n        //水平方向移动+碰撞检测\r\n        {\r\n            this.direction.z = Number(this.moveForward) - Number(this.moveBackward);\r\n            this.direction.x = Number(this.moveRight) - Number(this.moveLeft);\r\n            this.direction.normalize(); // this ensures consistent movements in all directions\r\n            let velocityXZMax = this.isRunning ? this.personOption.speedRun : this.personOption.speedWalk;\r\n\r\n            if (this.moveForward || this.moveBackward) {\r\n                let velocityZTmp = this.velocity.z + this.direction.z * velocityXZMax * this.personOption.accelerateRateStart;\r\n                if (Math.abs(velocityZTmp) < velocityXZMax) {\r\n                    this.velocity.z = velocityZTmp;\r\n                } else {\r\n                    this.velocity.z = this.direction.z * velocityXZMax;\r\n                }\r\n            } else {\r\n                this.velocity.z = Math.abs(this.velocity.z) > 1 ? this.velocity.z * (this.personOption.accelerateRateStop) : 0;\r\n            }\r\n\r\n            if (this.moveLeft || this.moveRight) {\r\n                let velocityXTmp = this.velocity.x + this.direction.x * velocityXZMax * this.personOption.accelerateRateStart;\r\n                if (Math.abs(velocityXTmp) < velocityXZMax) {\r\n                    this.velocity.x = velocityXTmp;\r\n                } else {\r\n                    this.velocity.x = this.direction.x * velocityXZMax;\r\n                }\r\n            } else {\r\n                this.velocity.x = Math.abs(this.velocity.x) > 1 ? this.velocity.x * (this.personOption.accelerateRateStop) : 0;\r\n            }\r\n\r\n            let positionBeforeX = this.controls.getObject().position.x;\r\n            let positionBeforeZ = this.controls.getObject().position.z;\r\n\r\n            this.controls.moveForward(this.velocity.z * delta);\r\n            this.controls.moveRight(this.velocity.x * delta);\r\n\r\n            //横向碰撞检测辅助参数\r\n            const checkPositionOptions = [\r\n                -(this.personOption.sightHeight - 0.05),\r\n                -(this.personOption.sightHeight - this.personOption.height / 2),\r\n                (this.personOption.height - this.personOption.sightHeight - 0.05),\r\n                -(this.personOption.sightHeight - 0.5),\r\n                (this.personOption.height - this.personOption.sightHeight - 0.5)\r\n            ];\r\n            let rayMove = this.personOption.thickness / 2;\r\n\r\n            {//z轴碰撞检测\r\n\r\n                let Z0Flat = undefined;//z负轴碰撞检测\r\n                let Z0NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        if (this.checkRay.Z0[i] === undefined) {\r\n                            this.checkRay.Z0.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, 0, -1), 0, 0));\r\n                        }\r\n                        this.checkRay.Z0[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.Z0[i].ray.origin.x = positionBeforeX;//修正为移动前的x轴位置，防止使用位移后的位置检测墙壁\r\n                        this.checkRay.Z0[i].ray.origin.x += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.Z0[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.Z0[i].intersectObjects(objectsImpenetrable);\r\n                        if (intersections.length > 0) {\r\n                            Z0NearFlatTmp = intersections[0].point.z;\r\n                            Z0Flat = Math.max(Z0Flat === undefined ? Z0NearFlatTmp : Z0Flat, Z0NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let Z1Flat = undefined;//z正轴碰撞检测\r\n                let Z1NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        if (this.checkRay.Z1[i] === undefined) {\r\n                            this.checkRay.Z1.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, 0, 1), 0, 0));\r\n                        }\r\n                        this.checkRay.Z1[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.Z1[i].ray.origin.x = positionBeforeX;\r\n                        this.checkRay.Z1[i].ray.origin.x += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.Z1[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.Z1[i].intersectObjects(objectsImpenetrable);\r\n                        if (intersections.length > 0) {\r\n                            Z1NearFlatTmp = intersections[0].point.z;\r\n                            Z1Flat = Math.min(Z1Flat === undefined ? Z1NearFlatTmp : Z1Flat, Z1NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let nextZ = this.controls.getObject().position.z;\r\n                nextZ = Math.min(Z1Flat === undefined ? nextZ : (Z1Flat - this.personOption.thickness / 2 - 0.01), nextZ);\r\n                nextZ = Math.max(Z0Flat === undefined ? nextZ : (Z0Flat + this.personOption.thickness / 2 + 0.01), nextZ);\r\n                this.controls.getObject().position.z = nextZ\r\n            }\r\n\r\n            {//x轴碰撞检测\r\n                let X0Flat = undefined;//x负轴碰撞检测\r\n                let X0NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        if (this.checkRay.X0[i] === undefined) {\r\n                            this.checkRay.X0.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(-1, 0, 0), 0, 0));\r\n                        }\r\n                        this.checkRay.X0[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.X0[i].ray.origin.z = positionBeforeZ;\r\n                        this.checkRay.X0[i].ray.origin.z += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.X0[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.X0[i].intersectObjects(objectsImpenetrable);\r\n                        if (intersections.length > 0) {\r\n                            X0NearFlatTmp = intersections[0].point.x;\r\n                            X0Flat = Math.max(X0Flat === undefined ? X0NearFlatTmp : X0Flat, X0NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let X1Flat = undefined;//x正轴碰撞检测\r\n                let X1NearFlatTmp;\r\n                {\r\n                    for (let i = 0; i < 10; i++) {\r\n                        if (this.checkRay.X1[i] === undefined) {\r\n                            this.checkRay.X1.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(1, 0, 0), 0, 0));\r\n                        }\r\n                        this.checkRay.X1[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                        this.checkRay.X1[i].ray.origin.z = positionBeforeZ;\r\n                        this.checkRay.X1[i].ray.origin.z += (i % 2 === 0 ? 1 : -1) * rayMove;\r\n                        this.checkRay.X1[i].ray.origin.y += checkPositionOptions[Math.floor(i / 2)];\r\n                        let intersections = this.checkRay.X1[i].intersectObjects(objectsImpenetrable);\r\n                        if (intersections.length > 0) {\r\n                            X1NearFlatTmp = intersections[0].point.x;\r\n                            X1Flat = Math.min(X1Flat === undefined ? X1NearFlatTmp : X1Flat, X1NearFlatTmp);\r\n                        }\r\n                    }\r\n                }\r\n                let nextX = this.controls.getObject().position.x;\r\n                nextX = Math.max(X0Flat === undefined ? nextX : (X0Flat + this.personOption.thickness / 2 + 0.01), nextX);\r\n                nextX = Math.min(X1Flat === undefined ? nextX : (X1Flat - this.personOption.thickness / 2 - 0.01), nextX);\r\n                this.controls.getObject().position.x = nextX\r\n                // console.log(Z0Flat,Z1Flat,X0Flat,X1Flat)\r\n            }\r\n            // console.log(this.controls.getObject().position.x,this.controls.getObject().position.y,this.controls.getObject().position.z)\r\n        }\r\n        //垂直方向移动+碰撞检测\r\n        {\r\n            let bottomFlatY = undefined;\r\n            //坠落四角+中间 检测\r\n            {\r\n                for (let i = 0; i < 5; i++) {\r\n                    if (this.checkRay.Y0[i] === undefined) {\r\n                        this.checkRay.Y0.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, -1, 0), 0, 0));\r\n                    }\r\n                    this.checkRay.Y0[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                }\r\n                let rayMove = this.personOption.thickness / 2;\r\n                this.checkRay.Y0[0].ray.origin.x += rayMove;\r\n                this.checkRay.Y0[0].ray.origin.z -= rayMove;\r\n                this.checkRay.Y0[1].ray.origin.x += rayMove;\r\n                this.checkRay.Y0[1].ray.origin.z += rayMove;\r\n                this.checkRay.Y0[2].ray.origin.x -= rayMove;\r\n                this.checkRay.Y0[2].ray.origin.z += rayMove;\r\n                this.checkRay.Y0[3].ray.origin.x -= rayMove;\r\n                this.checkRay.Y0[3].ray.origin.z -= rayMove;\r\n                for (let i = 0; i < 5; i++) {\r\n                    let intersections = this.checkRay.Y0[i].intersectObjects(objectsImpenetrable);\r\n                    if (intersections.length > 0) {\r\n                        let bottomFlatYTmp = intersections[0].point.y;\r\n                        bottomFlatY = Math.max(bottomFlatY === undefined ? bottomFlatYTmp : bottomFlatY, bottomFlatYTmp);\r\n                    }\r\n                }\r\n            }\r\n            //头顶四角+中间 检测\r\n            let topFlatY = undefined;\r\n            {\r\n                for (let i = 0; i < 5; i++) {\r\n                    if (this.checkRay.Y1[i] === undefined) {\r\n                        this.checkRay.Y1.push(new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, 1, 0), 0, 0));\r\n                    }\r\n                    this.checkRay.Y1[i].ray.origin.copy(this.controls.getObject().position);//设置射线原点在摄像机位置，即人物眼睛位置\r\n                }\r\n                let rayMove = this.personOption.thickness / 2 - 0.001;\r\n                this.checkRay.Y1[0].ray.origin.x += rayMove;\r\n                this.checkRay.Y1[0].ray.origin.z -= rayMove;\r\n                this.checkRay.Y1[1].ray.origin.x += rayMove;\r\n                this.checkRay.Y1[1].ray.origin.z += rayMove;\r\n                this.checkRay.Y1[2].ray.origin.x -= rayMove;\r\n                this.checkRay.Y1[2].ray.origin.z += rayMove;\r\n                this.checkRay.Y1[3].ray.origin.x -= rayMove;\r\n                this.checkRay.Y1[3].ray.origin.z -= rayMove;\r\n                for (let i = 0; i < 5; i++) {\r\n                    let intersections = this.checkRay.Y1[i].intersectObjects(objectsImpenetrable);\r\n                    if (intersections.length > 0) {\r\n                        let topFlatYTmp = intersections[0].point.y;\r\n                        topFlatY = Math.min(topFlatY === undefined ? topFlatYTmp : topFlatY, topFlatYTmp);\r\n                    }\r\n                }\r\n            }\r\n            //无碰撞时下次垂直位置(相机位置)\r\n            let nextY = this.controls.getObject().position.y + (this.velocity.y * delta);\r\n            if (topFlatY !== undefined) {\r\n                if (nextY > topFlatY - (this.personOption.height - this.personOption.sightHeight)) {\r\n                    nextY = topFlatY - (this.personOption.height - this.personOption.sightHeight);\r\n                    this.velocity.y = 0;\r\n                }\r\n            }\r\n            if (bottomFlatY !== undefined) {\r\n                //下方检测到平台时，脚部不能低于最低平台\r\n                nextY = Math.max(bottomFlatY + this.personOption.sightHeight, nextY);\r\n                if (nextY === bottomFlatY + this.personOption.sightHeight) {\r\n                    this.velocity.y = 0;\r\n                    this.canJump = true;\r\n                } else {\r\n                    this.velocity.y -= this.worldOption.g * Math.sqrt(delta);\r\n                }\r\n            } else {\r\n                //下方未检测到平台时\r\n                this.velocity.y -= this.worldOption.g * Math.sqrt(delta);\r\n            }\r\n            this.controls.getObject().position.y = nextY;\r\n        }\r\n        //掉落位置重置\r\n        if (this.controls.getObject().position.y < -500) {\r\n            this.velocity.y = 0;\r\n            this.controls.getObject().position.y = 500;\r\n            this.controls.getObject().position.x = 0;\r\n            this.controls.getObject().position.z = 0;\r\n        }\r\n        this.updatePreviewCube();\r\n    }\r\n\r\n    initMouseFunction() {\r\n        //点击功能\r\n        window.addEventListener('mousedown', (event) => {\r\n            let clickedObjects = getClickedObject(this.objects, this.camera);//this.scene.children\r\n            if (clickedObjects.length > 0) {\r\n                console.log(\"点击对象【\" + clickedObjects[0].object.name + \"】\", clickedObjects[0]);\r\n                if (\r\n                    clickedObjects[0]\r\n                    && clickedObjects[0].distance <= 10\r\n                    && clickedObjects[0].face && clickedObjects[0].face.normal\r\n                    && clickedObjects[0].object && clickedObjects[0].object.position\r\n                ) {\r\n                    if (event.button === 0) {//删除方块 左键\r\n                        //TODO 改为长按同一方块时才删除\r\n                        // console.log(clickedObjects[0].object, this.scene.getObjectByName(clickedObjects[0].object.name));\r\n                        this.removeCube(clickedObjects[0].object);\r\n                        return;\r\n                    }\r\n                    if (event.button === 2) {//添加方块 右键\r\n                        //TODO 添加方块代码独立，方块不能添加到人物所站的地方\r\n                        let normal = clickedObjects[0].face.normal;\r\n                        let rotate = clickedObjects[0].object.rotation;\r\n                        let position = clickedObjects[0].object.position;\r\n                        let point = clickedObjects[0].point;\r\n\r\n                        let targetIsHalfCube = DefaultCube[clickedObjects[0].object.userData.cubeTypeKey].cubeAttributes && DefaultCube[clickedObjects[0].object.userData.cubeTypeKey].cubeAttributes.geometryType === GeometryType.HalfCube;\r\n                        let targetIsFlower1Cube = DefaultCube[clickedObjects[0].object.userData.cubeTypeKey].cubeAttributes && DefaultCube[clickedObjects[0].object.userData.cubeTypeKey].cubeAttributes.geometryType === GeometryType.Flower1Cube;\r\n                        let newIsFlower1Cube = DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes && DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes.geometryType === GeometryType.Flower1Cube;\r\n                        let newIsHalfCube = DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes && DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes.geometryType === GeometryType.HalfCube;\r\n                        let newIsStairsCube = DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes && DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]].cubeAttributes.geometryType === GeometryType.StairsCube;\r\n\r\n                        let newPositionVector = new THREE.Vector3(normal.x, normal.y, normal.z);\r\n                        newPositionVector = newPositionVector.applyAxisAngle(new THREE.Vector3(0, 0, 1), rotate.z);\r\n                        newPositionVector = newPositionVector.applyAxisAngle(new THREE.Vector3(0, 1, 0), rotate.y);\r\n                        newPositionVector = newPositionVector.applyAxisAngle(new THREE.Vector3(1, 0, 0), rotate.x);\r\n                        newPositionVector.round();\r\n\r\n                        let newPosition;\r\n                        if (!targetIsFlower1Cube && newIsFlower1Cube && newPositionVector.y !== 1) {//限制花只能放在顶面\r\n                            return;\r\n                        }\r\n                        if (targetIsFlower1Cube) {\r\n                            newPosition = position;//如果位置是花则花被顶替\r\n                        } else {\r\n                            let yMove = newPositionVector.y;\r\n                            if (targetIsHalfCube) {\r\n                                if (newIsHalfCube) {\r\n                                    if (newPositionVector.y !== 0) {\r\n                                        yMove = newPositionVector.y / 2\r\n                                    }\r\n                                } else {\r\n                                    if (newPositionVector.y !== 0) {\r\n                                        if (position.y > 0 ? position.y % 1 === 0.25 : position.y % 1 === -0.75) {\r\n                                            yMove = newPositionVector.y * (newPositionVector.y > 0 ? 3 : 5) / 4  //上半砖\r\n                                        } else {\r\n                                            yMove = newPositionVector.y * (newPositionVector.y > 0 ? 5 : 3) / 4  //下半砖\r\n                                        }\r\n                                    } else {\r\n                                        if (position.y > 0 ? position.y % 1 === 0.25 : position.y % 1 === -0.75) {\r\n                                            yMove = -1 / 4  //上半砖\r\n                                        } else {\r\n                                            yMove = 1 / 4  //下半砖\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (newIsHalfCube) {\r\n                                    if (newPositionVector.y !== 0) {\r\n                                        yMove = newPositionVector.y * 3 / 4;\r\n                                    } else {\r\n                                        yMove = (point.y > position.y ? 1 : -1) / 4;\r\n                                    }\r\n                                }\r\n                            }\r\n                            newPosition = {\r\n                                x: position.x + newPositionVector.x,\r\n                                y: position.y + yMove,\r\n                                z: position.z + newPositionVector.z,\r\n                            };\r\n                            //检查同位置重复方块\r\n                            let existObject = checkPositionIsExistBlock(newPosition, this.objects);\r\n                            if (existObject) {\r\n                                if (existObject.userData.cubeAttributes.geometryType === GeometryType.Flower1Cube) {\r\n                                    this.removeCube(existObject);\r\n                                } else if (!newIsHalfCube) {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        let newDirectionRotate = {\r\n                            x: 0,\r\n                            y: 0,\r\n                            z: 0,\r\n                        };\r\n                        if (!newIsHalfCube) {//放置 转向\r\n                            let newDirection;\r\n                            let worldDirection = this.camera.getWorldDirection(new Vector3(1, 0, 0));\r\n                            if (Math.abs(worldDirection.x) >= Math.abs(worldDirection.z)) {\r\n                                newDirection = new Vector3(-worldDirection.x, 0, 0)\r\n                            } else {\r\n                                newDirection = new Vector3(0, 0, -worldDirection.z)\r\n                            }\r\n                            newDirection.normalize().round();\r\n                            if (Math.abs(worldDirection.y) >= 0.5) {\r\n                                newDirection.y = worldDirection.y > 0 ? 1 : -1\r\n                            }\r\n                            //x，z轴旋转\r\n                            if (newDirection.x === 1) {\r\n                                newDirectionRotate.y = 0;\r\n                            } else if (newDirection.x === -1) {\r\n                                newDirectionRotate.y = 180;\r\n                            } else if (newDirection.z === 1) {\r\n                                newDirectionRotate.y = -90;\r\n                            } else if (newDirection.z === -1) {\r\n                                newDirectionRotate.y = 90;\r\n                            }\r\n                            //y轴旋转\r\n                            if (newDirection.y !== 0) {\r\n                                newDirectionRotate.z = newDirection.y > 0 ? -90 : 90;\r\n                            }\r\n                            newDirectionRotate.z += 90;//放置时方块顶部面冲玩家\r\n                        }\r\n                        if (newIsStairsCube) {\r\n                            newDirectionRotate.z -= 90;\r\n                        }\r\n                        let cubeFactory = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]);\r\n                        let cube = cubeFactory.buildCube(newPosition.x, newPosition.y, newPosition.z, DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]], 0, newDirectionRotate.y, newDirectionRotate.z);\r\n                        if (targetIsFlower1Cube) {\r\n                            this.removeCube(clickedObjects[0].object);\r\n                        }\r\n                        this.scene.add(cube);\r\n                        this.objects.push(cube);\r\n                    }\r\n                }\r\n            }\r\n        }, false);\r\n        //滑轮功能\r\n        {\r\n            if (document.addEventListener) {//firefox\r\n                document.addEventListener('DOMMouseScroll', (e) => {\r\n                    e = e || window.event;\r\n                    if (e.wheelDelta) { //第一步：先判断浏览器IE，谷歌滑轮事件\r\n                        this.changeCurrentCubeTypeIndex(e.wheelDelta < 0);\r\n                    } else if (e.detail) { //Firefox滑轮事件\r\n                        this.changeCurrentCubeTypeIndex(e.detail < 0);\r\n                    }\r\n                }, false);\r\n            }\r\n            //滚动滑轮触发scrollFunc方法 //ie 谷歌\r\n            window.onmousewheel = (e) => {\r\n                console.log('滑轮', this.currentCubeTypeIndex);\r\n                e = e || window.event;\r\n                if (e.wheelDelta) { //第一步：先判断浏览器IE，谷歌滑轮事件\r\n                    this.changeCurrentCubeTypeIndex(e.wheelDelta < 0);\r\n                } else if (e.detail) { //Firefox滑轮事件\r\n                    this.changeCurrentCubeTypeIndex(e.detail < 0);\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    changeCurrentCubeTypeIndex(isNext) {\r\n        if (isNext) {\r\n            this.currentCubeTypeIndex++;\r\n            if (this.currentCubeTypeIndex === Object.keys(DefaultCube).length) {\r\n                this.currentCubeTypeIndex = 0;\r\n            }\r\n        } else {\r\n            if (this.currentCubeTypeIndex === 0) {\r\n                this.currentCubeTypeIndex = Object.keys(DefaultCube).length;\r\n            }\r\n            this.currentCubeTypeIndex--;\r\n        }\r\n    }\r\n\r\n    getCurrentCubeTypeIndex(plusValue) {\r\n        let result = this.currentCubeTypeIndex + (plusValue || 0) % Object.keys(DefaultCube).length;\r\n        if (result >= 0) {\r\n            return result;\r\n        } else {\r\n            return Object.keys(DefaultCube).length - 1 + result\r\n        }\r\n    }\r\n\r\n    initPreviewCube() {\r\n        this.previewCube = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]).buildCube();\r\n        this.scene.add(this.previewCube);\r\n    }\r\n\r\n    updatePreviewCube() {\r\n        //形状刷新\r\n        {\r\n            if (!this.previewCube.geometryMap) {\r\n                this.previewCube.geometryMap = {};\r\n            }\r\n\r\n            if (this.previewCubeType !== Object.keys(DefaultCube)[this.currentCubeTypeIndex]) {\r\n                this.previewCubeType = Object.keys(DefaultCube)[this.currentCubeTypeIndex];\r\n                if (this.previewCube.geometryMap[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]) {\r\n                    this.previewCube.geometry = this.previewCube.geometryMap[Object.keys(DefaultCube)[this.currentCubeTypeIndex]]\r\n                } else {\r\n                    let previewGeometry = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.getCurrentCubeTypeIndex()]])._geometry.clone();\r\n                    previewGeometry.scale(0.01, 0.01, 0.01);\r\n                    this.previewCube.geometry = previewGeometry;\r\n                    this.previewCube.geometryMap[Object.keys(DefaultCube)[this.currentCubeTypeIndex]] = previewGeometry;\r\n                }\r\n            }\r\n        }\r\n        //材质刷新\r\n        this.previewCube.material = new CubeFactory(DefaultCube[Object.keys(DefaultCube)[this.getCurrentCubeTypeIndex()]])._materials;\r\n        //位置刷新\r\n        this.previewCube.position.copy(this.camera.position);\r\n        //旋转刷新\r\n        {\r\n            {\r\n                if (!this.previewCubeRotation) {\r\n                    this.previewCubeRotation = {\r\n                        y: 0,\r\n                    }\r\n                } else {\r\n                    this.previewCubeRotation.y += Math.PI / 180;\r\n                }\r\n            }\r\n            this.previewCube.rotation.copy(this.camera.rotation);\r\n            this.previewCube.position.add(\r\n                new Vector3(0, -0.065, -0.2)\r\n                    .applyAxisAngle(new Vector3(0, 0, 1), this.camera.rotation.z)\r\n                    .applyAxisAngle(new Vector3(0, 1, 0), this.camera.rotation.y)\r\n                    .applyAxisAngle(new Vector3(1, 0, 0), this.camera.rotation.x)\r\n            );\r\n            this.previewCube.rotateY(Math.PI / 4 + this.previewCubeRotation.y)\r\n        }\r\n    }\r\n\r\n    removeCube(object) {\r\n        let index = this.objects.findIndex(e => e.id === object.id);\r\n        if (index >= 0) {\r\n            this.objects.splice(index, 1);\r\n        }\r\n        this.scene.remove(this.scene.getObjectById(object.id));\r\n    }\r\n}\r\n\r\nfunction setAimStyle(aimEl) {\r\n    aimEl.style.position = \"fixed\";\r\n    aimEl.style.left = \"50%\";\r\n    aimEl.style.top = \"50%\";\r\n    aimEl.style.transform = \"translate(-50%,-50%)\";\r\n    aimEl.style.zIndex = \"1\";\r\n    aimEl.style.fontSize = \"100%\";\r\n    aimEl.style.fontWeight = \"bold\";\r\n    aimEl.style.textAlign = \"center\";\r\n    aimEl.style.verticalAlign = \"middle\";\r\n    aimEl.style.lineHeight = \"10px\";\r\n    aimEl.style.fontFamily = \"\\\"Times New Roman\\\",serif\";\r\n    aimEl.style.backgroundColor = \"#E0E0E0\";\r\n}\r\n\r\n//获取点击的对象\r\nfunction getClickedObject(objects, camera) {\r\n    let raycaster = new THREE.Raycaster();\r\n    let aim = new THREE.Vector2();\r\n    //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\r\n    aim.x = 0;\r\n    aim.y = 0;\r\n    // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n    raycaster.setFromCamera(aim, camera);\r\n    // 获取raycaster直线和所有模型相交的数组集合\r\n    return raycaster.intersectObjects(objects);\r\n}\r\n\r\n//检测新方块要放的位置是否已经有放快了\r\nfunction checkPositionIsExistBlock(checkObject, Objects) {\r\n    for (let object of Objects) {\r\n        if (Math.round(object.position.x) === Math.round(checkObject.x)\r\n            &&\r\n            Math.round(object.position.y) === Math.round(checkObject.y)\r\n            &&\r\n            Math.round(object.position.z) === Math.round(checkObject.z)) {\r\n            return object;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n\r\n","import * as THREE from 'three'\r\nimport {WEBGL} from \"three/examples/jsm/WebGL.js\";\r\n// import TWEEN from \"@tweenjs/tween.js\";//动作库\r\nimport CubeFactory from \"./utils/objects/cube/CubeFactory.js\";\r\nimport StatsWindow from \"./utils/stats/StatsWindow.js\";\r\nimport {initAmbientLight, getAmbientLightIntensity, lightHighIntensity, lightLowIntensity, lightCurrentIntensity, lightValueBecomeHigher, initDirectionalLight, getDirectionalLightIntensity} from \"./utils/basic/Light\";\r\nimport {initBGMPlayer} from \"./utils/sound/Bgm\";\r\nimport {initScene} from \"./utils/basic/Scene\";\r\nimport {initCamera} from \"./utils/basic/Camera\";\r\nimport {initRenderer} from \"./utils/basic/Renderer\";\r\nimport {initControls} from \"./utils/controls/ControlBuilder\";\r\nimport DefaultCube from \"./utils/objects/cube/DefaultCube\";\r\nimport GlobalSetting from \"./utils/setting/GlobalSetting\";\r\nimport device from \"current-device\";\r\nimport GeometryType from \"./utils/objects/cube/GeometryType\";\r\nimport {MeshLambertMaterial} from \"three\";\r\n\r\n\r\n// 检查设备\r\nif (device.type === 'mobile') {\r\n    let divEl = document.createElement('div');\r\n    divEl.style.position = \"absolute\";\r\n    divEl.style.top = \"35%\";\r\n    divEl.style.width = \"100%\";\r\n    divEl.style.zIndex = \"1000\";\r\n    divEl.style.textAlign = 'center';\r\n    divEl.style.fontWeight = 'bold';\r\n    divEl.style.color = 'gray';\r\n    divEl.style.fontSize = '1em';\r\n    let spanEl1 = document.createElement('span');\r\n    spanEl1.style.fontSize = '1.5em';\r\n    spanEl1.innerText = \"手机不可以（懒得做） :(\";\r\n    let spanEl2 = document.createElement('span');\r\n    spanEl2.innerText = \"Cell phone is not OK :(\";\r\n    let spanEl3 = document.createElement('span');\r\n    spanEl3.style.fontSize = '1.5em';\r\n    spanEl3.innerText = \"还是用电脑试试吧 :)\";\r\n    let spanEl4 = document.createElement('span');\r\n    spanEl4.innerText = \"Let's try it with computer :)\";\r\n    divEl.append(spanEl1, document.createElement('br'), spanEl2, document.createElement('br'), spanEl3, document.createElement('br'), spanEl4);\r\n    document.body.appendChild(divEl);\r\n    throw \"unsupport platform\";\r\n}\r\n\r\nif (!WEBGL.isWebGLAvailable()) {\r\n    let divEl = document.createElement('div');\r\n    divEl.style.position = \"absolute\";\r\n    divEl.style.top = \"35%\";\r\n    divEl.style.width = \"100%\";\r\n    divEl.style.zIndex = \"1000\";\r\n    divEl.style.textAlign = 'center';\r\n    divEl.style.fontWeight = 'bold';\r\n    divEl.style.color = 'gray';\r\n    divEl.style.fontSize = '1em';\r\n    let spanEl1 = document.createElement('span');\r\n    spanEl1.style.fontSize = '1.5em';\r\n    spanEl1.innerText = \"这个浏览器不太行 :(\";\r\n    let spanEl2 = document.createElement('span');\r\n    spanEl2.innerText = \"This browser doesn't work well :(\";\r\n    let spanEl3 = document.createElement('span');\r\n    spanEl3.style.fontSize = '1.5em';\r\n    spanEl3.innerText = \"还是用流行的浏览器试试吧 :)\";\r\n    let spanEl4 = document.createElement('span');\r\n    spanEl4.innerText = \"Let's try it with a popular browser :)\";\r\n    divEl.append(spanEl1, document.createElement('br'), spanEl2, document.createElement('br'), spanEl3, document.createElement('br'), spanEl4);\r\n    document.body.appendChild(divEl);\r\n    document.body.appendChild(WEBGL.getWebGLErrorMessage());\r\n    throw \"unsupport browser\";\r\n}\r\n//------------------------------------初始化基本对象-结束------------------------------------------------\r\n\r\nlet canvasEL = document.getElementById(\"canvas-frame\");\r\n// 舞台*\r\nlet scene = initScene();\r\n// 光源*\r\nlet lightAmbient = initAmbientLight();\r\nscene.add(lightAmbient);\r\nlet lightDirectional;\r\nif (GlobalSetting.enableShadow) {\r\n    lightDirectional = initDirectionalLight();\r\n    scene.add(lightDirectional);\r\n}\r\n\r\n// 相机*\r\nlet camera = initCamera();\r\ncamera.aspect = canvasEL.offsetWidth / canvasEL.offsetHeight;\r\ncamera.updateProjectionMatrix();\r\nscene.add(camera);\r\n// 渲染器*\r\nlet renderer = initRenderer();\r\nrenderer.setSize(canvasEL.offsetWidth, canvasEL.offsetHeight);\r\nrenderer.setPixelRatio(window.devicePixelRatio);\r\ndocument.getElementById('canvas-frame').appendChild(renderer.domElement);\r\n// 收集所欲加入到场景的方块对象\r\nlet objects = [];\r\n// 相机控制器\r\nlet controls = initControls(\"MCFirstPersonControl\", scene, camera, renderer, objects);\r\n//------------------------------------初始化基本对象-结束------------------------------------------------\r\n//-----------以下为物体添加代码---------------------------------------------------------------\r\nlet lightOption = {\r\n    current: lightCurrentIntensity,\r\n    low: lightLowIntensity,\r\n    high: lightHighIntensity,\r\n    becomeHigher: lightValueBecomeHigher\r\n};\r\n\r\nfunction changeLight() {\r\n    lightAmbient.intensity = getAmbientLightIntensity(lightOption.current, lightOption.high, lightOption.low);\r\n    if (GlobalSetting.enableShadow) {\r\n        lightDirectional.intensity = getDirectionalLightIntensity(lightOption.current, lightOption.high, lightOption.low);\r\n    }\r\n    if (lightOption.becomeHigher) {\r\n        let tmp = lightOption.current >= lightOption.low - (lightOption.high - lightOption.low);\r\n        if (tmp) {\r\n            lightOption.current -= 0.002;\r\n        } else {\r\n            lightOption.becomeHigher = false;\r\n        }\r\n    } else {\r\n        if (lightOption.current <= lightOption.high + (lightOption.high - lightOption.low)) {\r\n            lightOption.current += 0.002;\r\n        } else {\r\n            if (lightOption.current > 1.5) {\r\n                lightOption.becomeHigher = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n(function addGrassCubes() {\r\n    let cubeFactory = new CubeFactory(DefaultCube.grass);\r\n    {\r\n        let testBlock = [];\r\n        let width = 10;\r\n        //底板\r\n        for (let x = -width; x < width; x++) {\r\n            for (let z = -width; z < width; z++) {\r\n                testBlock.push([x, -1, z]);\r\n            }\r\n        }\r\n        //阶梯\r\n        for (let x = 0; x < 5; x++) {\r\n            for (let z = 0; z < 5; z++) {\r\n                for (let y = 0; y < 5; y++) {\r\n                    if (y >= x) {\r\n                        testBlock.push([x - 7, y - x, z - 7])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //土堆\r\n        {\r\n            let mountainHeight = 4;\r\n            for (let y = 0; y < mountainHeight; y++) {\r\n                for (let x = y; x < 2 * mountainHeight - y; x++) {\r\n                    for (let z = y; z < 2 * mountainHeight - y; z++) {\r\n                        testBlock.push([x - 5, y, z + 1])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //碰撞检测用\r\n        {\r\n            for (let x = 0; x < 5; x++) {\r\n                for (let z = 0; z < 5; z++) {\r\n                    if (x !== 2 || z !== 2) {\r\n                        testBlock.push([x, 0, z - 5]);\r\n                    }\r\n                }\r\n            }\r\n            testBlock.push([0, 1, -5]);\r\n            testBlock.push([3, 3, -5]);\r\n            testBlock.push([2, 3, -5]);\r\n            testBlock.push([3, 3, -4]);\r\n            testBlock.push([2, 3, -4]);\r\n            testBlock.push([3, 3, -6]);\r\n            testBlock.push([2, 3, -6]);\r\n            testBlock.push([3, 3, -7]);\r\n            testBlock.push([2, 3, -7]);\r\n            testBlock.push([3, 2, -8]);\r\n            testBlock.push([2, 2, -8]);\r\n            testBlock.push([5, 2, -4]);\r\n            testBlock.push([4, 2, -4]);\r\n        }\r\n\r\n        let zValue = -10;\r\n        let xValue = 8;\r\n        let yValue = 1;\r\n        for (let cubeType of Object.values(DefaultCube)) {\r\n            let idHalfCube = cubeType.cubeAttributes && cubeType.cubeAttributes.geometryType === GeometryType.HalfCube;\r\n            testBlock.push([xValue, idHalfCube ? yValue - 1 / 4 : yValue, zValue++, cubeType]);\r\n            if (zValue === 10) {\r\n                yValue++;\r\n                zValue = -10;\r\n            }\r\n        }\r\n\r\n        testBlock.push([0, 15, 0, DefaultCube.grass]);\r\n\r\n\r\n        for (let cubeInfo of testBlock) {\r\n            let cube = cubeFactory.buildCube(...cubeInfo);\r\n\r\n            scene.add(cube);\r\n            objects.push(cube);\r\n        }\r\n    }\r\n})();\r\n\r\nlet prevTime = performance.now();\r\n(function animate() {\r\n    requestAnimationFrame(animate);\r\n    let time = performance.now();\r\n    let delta = (time - prevTime) / 1000;\r\n    prevTime = time;\r\n    // TWEEN.update(delta);\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n    new StatsWindow(\"canvas-frame\").stats.update(delta);\r\n    changeLight();\r\n})();\r\n\r\nwindow.onresize = () => {\r\n    //更新相机视角比例\r\n    camera.aspect = canvasEL.offsetWidth / canvasEL.offsetHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(canvasEL.offsetWidth, canvasEL.offsetHeight);\r\n};\r\n\r\nwindow.onload = () => {\r\n    initBGMPlayer();\r\n};\r\n","import * as THREE from 'three';\r\nexport function initScene() {\r\n    let scene = new THREE.Scene();\r\n    let backgroundColor= 0x87CEEB;\r\n    scene.name = 'SCENE';\r\n    scene.fog = new THREE.FogExp2(backgroundColor, 0.005);//雾效果\r\n    //增加天空盒\r\n    (function skyBox(backgroundType) {\r\n        backgroundType = backgroundType || 1;\r\n        let textureCube = new THREE.CubeTextureLoader().load([\r\n            './assets/img/1.png',\r\n            './assets/img/2.png',\r\n            './assets/img/3.png',\r\n            './assets/img/4.png',\r\n            './assets/img/5.png',\r\n            './assets/img/6.png'\r\n        ]);\r\n        if (backgroundType === 1) {//使用场景背景添加\r\n            scene.background = new THREE.Color(backgroundColor);\r\n        } else if (backgroundType === 2) {\r\n            scene.background = textureCube\r\n        } else {//使用盒子添加\r\n            //着色器\r\n            let cubeShader = THREE.ShaderLib[\"cube\"];\r\n            cubeShader.uniforms[\"tCube\"].value = textureCube;\r\n            let material = new THREE.ShaderMaterial({\r\n                fragmentShader: cubeShader.fragmentShader,  //定义自己的片元着色器\r\n                vertexShader: cubeShader.vertexShader,  //定义自己的顶点着色器\r\n                uniforms: cubeShader.uniforms,  //给着色器传入uniform变量的值\r\n                depthWrite: false,  //决定这个材质是否影响WebGL的深度缓存\r\n                side: THREE.BackSide,  //侧面：反面\r\n            });\r\n            //创建方盒子\r\n            let cubeWithPic = new THREE.Mesh(new THREE.CubeGeometry(1000000, 1000000, 1000000), material);\r\n            scene.add(cubeWithPic);\r\n        }\r\n    })(1);\r\n    return scene;\r\n}","import * as THREE from \"three\";\r\n\r\nexport function initCamera() {\r\n    let camera = new THREE.PerspectiveCamera();\r\n    camera.name = \"CAMERA\";\r\n    camera.fov = 45; //fov表示摄像机视锥体垂直视野角度，最小值为0，最大值为180，默认值为50，实际项目中一般都定义45，因为45最接近人正常睁眼角度\r\n    // camera.aspect = width / height; //aspect表示摄像机视锥体长宽比，默认长宽比为1，即表示看到的是正方形，实际项目中使用的是屏幕的宽高比\r\n    camera.near = 0.1; //near表示摄像机视锥体近端面，这个值默认为0.1，实际项目中都会设置为1\r\n    camera.far = 1000; //far表示摄像机视锥体远端面，默认为2000，这个值可以是无限的，说的简单点就是我们视觉所能看到的最远距离\r\n    camera.position.x = 0;\r\n    camera.position.y = 10;\r\n    camera.position.z = 0;\r\n    return camera;\r\n}","import * as THREE from \"three\";\r\nimport GlobalSetting from \"../setting/GlobalSetting\";\r\n\r\nexport function initRenderer() {\r\n    let renderer = new THREE.WebGLRenderer();\r\n    renderer.name = 'RENDERER';\r\n    // renderer.antialias = true;//是否开启反锯齿\r\n    renderer.shadowMap.enabled =  GlobalSetting.enableShadow;\r\n    // renderer.shadowMap.type = THREE.PCFSoftShadowMap;//更柔和的影子，需要的性能更高\r\n    // renderer.setSize(width, height);\r\n    renderer.setClearColor(0xFFFFFF, 1.0);//背景颜色\r\n    return renderer\r\n}","import ShowOrbitControl from \"./ShowOrbitControl\";\r\nimport MCFirstPersonControl from \"./MCFirstPersonControl\";\r\n\r\nexport function initControls(controlsType,scene,camera,renderer,objects) {\r\n    let controls;\r\n    switch (controlsType) {\r\n        case \"ShowOrbitControl\":\r\n            let showOrbitControl = new ShowOrbitControl(camera, renderer.domElement);\r\n            showOrbitControl.initClickFunction(scene.children);\r\n            controls = showOrbitControl.controls;\r\n            break;\r\n        case \"MCFirstPersonControl\":\r\n            let mcFirstPersonControl = new MCFirstPersonControl(camera, renderer.domElement, objects, scene);\r\n            controls = mcFirstPersonControl;\r\n            break;\r\n    }\r\n    return controls;\r\n}","\r\nexport  function initBGMPlayer() {\r\n    let audioBGM;\r\n    let currentIndex = 0;\r\n    let arr = [//把需要播放的歌曲从后往前排，这里已添加两首音乐，可继续添加多个音乐\r\n        \"./assets/sound/calm1.ogg\",\r\n        \"./assets/sound/calm2.ogg\",\r\n        \"./assets/sound/calm3.ogg\",\r\n        \"./assets/sound/hal1.ogg\",\r\n        \"./assets/sound/hal2.ogg\",\r\n        \"./assets/sound/hal3.ogg\",\r\n        \"./assets/sound/hal4.ogg\",\r\n    ];\r\n    audioBGM = new Audio();\r\n    audioBGM.preload = \"true\";\r\n    audioBGM.controls = true;\r\n    audioBGM.autoplay = true;\r\n    // audioBGM.muted = true;\r\n    audioBGM.hidden = true;\r\n    audioBGM.style.display = \"none\";\r\n    audioBGM.style.position = \"fixed\";\r\n    audioBGM.style.top = \"0\";\r\n    audioBGM.style.right = \"0\";\r\n    audioBGM.style.zIndex = \"101\";\r\n    audioBGM.loop = false;//禁止循环，否则无法触发ended事件\r\n    audioBGM.src = arr[currentIndex];         //每次读数组最后一个元素\r\n    audioBGM.addEventListener('ended', playEndedHandler, false);\r\n    document.addEventListener('click', playHandler, false);\r\n    // audioBGM.play();\r\n    document.body.appendChild(audioBGM);\r\n\r\n    function playEndedHandler() {\r\n        currentIndex++;\r\n        if (currentIndex >= arr.length) {\r\n            currentIndex = 0;\r\n        }\r\n        audioBGM.src = arr[currentIndex];\r\n        audioBGM.play();\r\n        // myAudio.removeEventListener('ended', playEndedHandler, false);\r\n    }\r\n\r\n    function playHandler() {\r\n        audioBGM.play();\r\n        document.removeEventListener('click', playHandler, false);\r\n    }\r\n    return audioBGM;\r\n}"],"sourceRoot":""}